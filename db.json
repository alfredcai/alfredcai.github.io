{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/animate-css/animate.min.css","path":"lib/animate-css/animate.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"77586052d0986059bf3c7ae25f3dd67e65008bd1","modified":1593748308957},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1593749595476},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1593749595476},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1593749595476},{"_id":"themes/next/.gitignore","hash":"f38ec75a2e78b1c43f5dc503fa454b4520d34049","modified":1593749595479},{"_id":"themes/next/.npmignore","hash":"59611fd616cde705813dbdc11f53828c711cd963","modified":1593749595479},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1593749595480},{"_id":"themes/next/LICENSE.md","hash":"63ea7df5a8dc1b23cc92ca9de3ed16d53367f360","modified":1593749595480},{"_id":"themes/next/README.md","hash":"ea47c47a478124ca15a0818c6105f99d88482d21","modified":1593749595480},{"_id":"themes/next/_config.yml","hash":"4425487e25eabe11e97dfd06402df2e3cc681d45","modified":1594267274005},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1593749595480},{"_id":"themes/next/gulpfile.js","hash":"42804abfa29bcb78558cc47b31109580091186e6","modified":1593749595482},{"_id":"themes/next/package.json","hash":"79a36802f93650ff0042336721dd948cc19ea520","modified":1593749595496},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1593749595496},{"_id":"source/_posts/recommend-git.md","hash":"4d8815ed8f1ff4c0c6553890150539d74996352e","modified":1594267413649},{"_id":"source/_posts/ubuntu16-04-install-cuda8-cudnn6-tensorflow.md","hash":"66ad2c30a767c15ebc674bd69181d2e0af5911f3","modified":1594267408209},{"_id":"source/_posts/decsion-tree.md","hash":"254696bde859b9ad6c5afc69a9dce3bcd04df5e5","modified":1594267361786},{"_id":"source/about/index.md","hash":"261950e8e37ebec63040e40545c24e9340af7c39","modified":1593748308958},{"_id":"source/tags/index.md","hash":"74129c57474d05df0ad61042ddc571bb62334ac1","modified":1593748308958},{"_id":"source/wishlist/index.md","hash":"e87ebe96bf494d97ea9c978a119cd29c673728fb","modified":1593748308959},{"_id":"source/_posts/buildpacks.md","hash":"4182a631e38637fbb66c3fc22de8b877cf201fcb","modified":1594267358293},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"81dbb25800165f68c21859cd3c09276b9f4cc417","modified":1593749595477},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4ed17f5f674ca562d72c3a7e9a9b0a58354ffca3","modified":1593749595477},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"e375caf939b740f014524fcd7ebc47b3e5b0169c","modified":1593749595477},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1593749595478},{"_id":"themes/next/.github/issue-close-app.yml","hash":"e76e25b4e883886f387980fa47882efba3e46e03","modified":1593749595478},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1593749595478},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1593749595478},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1593749595478},{"_id":"themes/next/.github/release-drafter.yml","hash":"7662e31224a24154c4fe06b95ccbdff51ab8f2cc","modified":1593749595478},{"_id":"themes/next/.github/stale.yml","hash":"63a94166bd16a69faef7e64f3cdab9faa2fb6cee","modified":1593749595478},{"_id":"themes/next/.github/support.yml","hash":"a8efb3f7e80ffc431b8e27bf1057187b8ebf103e","modified":1593749595478},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1593749595481},{"_id":"themes/next/docs/LICENSE.txt","hash":"8ef5fc1147c196680b06e1accab80c8d236ab951","modified":1593749595481},{"_id":"themes/next/languages/README.md","hash":"b95a04c906bfddd81051a5ce06364692e078abc4","modified":1593749595482},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1593749595483},{"_id":"themes/next/languages/de.yml","hash":"2986eac01218406f45bbd46f98769e1826822b56","modified":1593749595483},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1593749595483},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1593749595483},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1593749595483},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1593749595483},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1593749595484},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1593749595484},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1593749595484},{"_id":"themes/next/languages/ja.yml","hash":"a4208ac966fa7c740b4acf72faaec025d8d6e57b","modified":1593749595484},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1593749595485},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1593749595485},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1593749595486},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1593749595486},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1593749595486},{"_id":"themes/next/languages/tr.yml","hash":"cea795fb74bfd48d5aa2dd10a5aff2242f703c65","modified":1593749595486},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1593749595486},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1593749595486},{"_id":"themes/next/languages/zh-CN.yml","hash":"1a1ec7aa00340cefdec5e3241de2d8c8efb29f54","modified":1593749595486},{"_id":"themes/next/languages/zh-HK.yml","hash":"59ed4f9e879004f0f4e2f56acce4ad0f8031c172","modified":1593749595486},{"_id":"themes/next/languages/zh-TW.yml","hash":"e4a6326a97fa72127325179a563dd0bbfc6d565e","modified":1593749595487},{"_id":"themes/next/layout/_layout.njk","hash":"38a65c0140e9e9193255d268ce7e6312675539b6","modified":1593749595487},{"_id":"themes/next/layout/archive.njk","hash":"b5ed50f945ab7134790953768c7e27ca0ff67b8b","modified":1593749595495},{"_id":"themes/next/layout/category.njk","hash":"efbe65617331b77d6ac3e75e13cdc00cab559c1d","modified":1593749595496},{"_id":"themes/next/layout/index.njk","hash":"d8fa14549fa061e7bdba4ec1472cb45ecea96382","modified":1593749595496},{"_id":"themes/next/layout/page.njk","hash":"76798bfd8e169db24139b019e7d9d1e1d065398e","modified":1593749595496},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1593749595496},{"_id":"themes/next/layout/tag.njk","hash":"131ae2123f0456a14a6aaa60a2d1bae467214097","modified":1593749595496},{"_id":"themes/next/scripts/renderer.js","hash":"890c9a0328b131f323a1e950b410c4ac134fe13a","modified":1593749595499},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1593749595481},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"9626d22524726140d1a2e34a15fcb77e1c5b2e28","modified":1593749595477},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"2cd96d9033b77e4496dc4d0efd1873dfc1b0031a","modified":1593749595477},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"0200bed29dad088a192ce8e9497980ce86d33002","modified":1593749595477},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"8591857d50174e0904c14c06bd4928ee245c7361","modified":1593749595477},{"_id":"themes/next/.github/workflows/linter.yml","hash":"4e807bb10ca31c0e7a1d6e3fcbd6b57b071b34d1","modified":1593749595479},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1593749595479},{"_id":"themes/next/docs/ru/README.md","hash":"be81a2c68ccee9dedda82f1111c3d3d7915638d7","modified":1593749595481},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0e204dde6d21f100cba6ca7751de71848490759e","modified":1593749595482},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"e1ba5c7eb4afe21c469a7b9e9e51f0f56002757e","modified":1593749595482},{"_id":"themes/next/docs/zh-CN/README.md","hash":"a636259123fac0e7cbed02db09c24e1b4d18a577","modified":1593749595482},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1593749595487},{"_id":"themes/next/layout/_macro/post.njk","hash":"332deb3afee5dd0799c44fd1c0e99a1224e43a66","modified":1593749595487},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"9e78799ef27486c2f54b8d26401627238ddf8e9e","modified":1593749595487},{"_id":"themes/next/layout/_partials/comments.njk","hash":"aede6cb60357aa390b2047191085c130b5654c2b","modified":1593749595487},{"_id":"themes/next/layout/_partials/footer.njk","hash":"d77a41c7ad0f610a8c3dcfbf1c6d60da41b93f9c","modified":1593749595487},{"_id":"themes/next/layout/_partials/languages.njk","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1593749595488},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1593749595489},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"0b1f91f9c230ae7ac0912ee244a791d35385b346","modified":1593749595490},{"_id":"themes/next/layout/_scripts/index.njk","hash":"2bfa2a2289641d26c5ab5e1a82df45128ed61ee2","modified":1593749595490},{"_id":"themes/next/layout/_scripts/noscript.njk","hash":"4f250d0bf80be06dd2c95c1d4c2ba2624b59cf2a","modified":1593749595490},{"_id":"themes/next/layout/_scripts/pjax.njk","hash":"c642fb7261ee80922bbc01593eba47d094a15b78","modified":1593749595491},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"e901e4984829e1e1ad6f252ab6f7713f7bdf4dbc","modified":1593749595491},{"_id":"themes/next/layout/_third-party/baidu-push.njk","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1593749595492},{"_id":"themes/next/layout/_third-party/index.njk","hash":"dc4d2dec2f726b8c5c9f5ac7d6dd0eef0814a0d0","modified":1593749595493},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0386ec5469898aea941a3a4fa649690094b7cd88","modified":1593749595494},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1593749595494},{"_id":"themes/next/scripts/events/index.js","hash":"437679c42b54dd7e17c6f37017f30911a4b3171c","modified":1593749595497},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1593749595498},{"_id":"themes/next/scripts/filters/locals.js","hash":"9d3e40a7f511c4f7f87fd6a80aa90bbeb0fd887c","modified":1593749595498},{"_id":"themes/next/scripts/filters/minify.js","hash":"406bfc1bf080ff713c417fa86414301187cac54b","modified":1593749595498},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1593749595498},{"_id":"themes/next/scripts/helpers/engine.js","hash":"495716df449fc91619f1e5d0c65d4774030557ba","modified":1593749595499},{"_id":"themes/next/scripts/helpers/font.js","hash":"19f5c943707b86c687f765f5f29987b17215eebb","modified":1593749595499},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"c60081bbd2bb12c0ed8390b32f901807a2f3ba6a","modified":1593749595499},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1593749595499},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"f935e1f5a13f4be4776dc0c85956503216fc324c","modified":1593749595499},{"_id":"themes/next/scripts/helpers/tagcloud.js","hash":"f7a093d020a2ee51908a1b2579138f9033caed38","modified":1593749595499},{"_id":"themes/next/scripts/tags/button.js","hash":"cc7a0925bcb0a53f3e5eb697a106dd35d61c08e9","modified":1593749595500},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"a5eba5a150ce4ecfaae7a6b0337ad3845a61e6fe","modified":1593749595500},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f12320d30358a66b9d2b7b637884fff9b7c3e793","modified":1593749595500},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"a87a572baff68ef6c7a638f730eecacfe4838b6e","modified":1593749595500},{"_id":"themes/next/scripts/tags/label.js","hash":"b505e799ad9304b1a81ca5648703b4beed1a7a28","modified":1593749595500},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"dcaec7531249e1a2d8dee3eb0116fdb200faee8e","modified":1593749595500},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"0e0263d584f43d54c5cf07c060c337ccaae067d7","modified":1593749595500},{"_id":"themes/next/scripts/tags/note.js","hash":"ee9efd5ab75f0451456eb28151765ee69d2971aa","modified":1593749595500},{"_id":"themes/next/scripts/tags/pdf.js","hash":"6c9b3360bc685562ea8dfed2096c1a60fd913be4","modified":1593749595500},{"_id":"themes/next/scripts/tags/tabs.js","hash":"89d660cadfa0ed0b0e24bd607f4d8db6f3b36173","modified":1593749595501},{"_id":"themes/next/scripts/tags/video.js","hash":"0d265210e8b6ab16650ce55b491f70bc0d050b6b","modified":1593749595501},{"_id":"themes/next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1593749595501},{"_id":"themes/next/source/css/_mixins.styl","hash":"82337ac32711643188925348bcdfdda8ce06375c","modified":1593749595511},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1593749595516},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1593749595516},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1593749595517},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1593749595517},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1593749595517},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1593749595517},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1593749595517},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1593749595518},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1593749595518},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1593749595518},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1593749595518},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1593749595518},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1593749595518},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1593749595518},{"_id":"themes/next/source/js/algolia-search.js","hash":"dac5f6106edb2a78f01587eeb4eca6c570416569","modified":1593749595519},{"_id":"themes/next/source/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1593749595519},{"_id":"themes/next/source/js/local-search.js","hash":"53cdd440474327eb35adea5ba79885c017eb81c3","modified":1593749595519},{"_id":"themes/next/source/js/motion.js","hash":"ee92c0fd8450b237a67198d979fcb8b7e379fab9","modified":1593749595519},{"_id":"themes/next/source/js/next-boot.js","hash":"ec02da452e37443fd246e7d9b91366a29ce674be","modified":1593749595519},{"_id":"themes/next/source/js/utils.js","hash":"615a2f51203e6676d0ed5cb81241cfe16192d885","modified":1593749595520},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1593749595520},{"_id":"themes/next/layout/_scripts/schemes/gemini.njk","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593749595491},{"_id":"themes/next/layout/_scripts/schemes/pisces.njk","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593749595491},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"21c90524c004e1f4eebebce93f38d43a74e578a0","modified":1593749595488},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"ba9037e044cfdeb6c5a08b8695e5a0311130df1a","modified":1593749595488},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"63534a53276218977a0e3aa194a8fa4d361f678b","modified":1593749595488},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1593749595488},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1593749595488},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"74d98d0a9a5b66abc7d85967306a84c37760d498","modified":1593749595488},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"d0fc3f7db263a79c730c5aa8c4d6af35ac49619c","modified":1593749595488},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1593749595489},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"41fe3fca15752137a98b2dac7a1c8ca2a9413678","modified":1593749595489},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1593749595489},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1593749595489},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1593749595489},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1593749595489},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"f5e099ee3a0deee5911a91b831ae207101b5cdf1","modified":1593749595490},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"3aaa75a06685ace1301654df456a7998dc0fcc01","modified":1593749595490},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"b7a66a465e897c27624f0c441375c95c4cb7a5aa","modified":1593749595490},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"55acf3f6ad73dbf8a8ce72b7e5e4720b4113f860","modified":1593749595490},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"93e555e5780e04b52e9b7a4d3b0fea4c9443f3ac","modified":1593749595490},{"_id":"themes/next/layout/_scripts/pages/schedule.njk","hash":"82e61a7d441417cfd46a5833839b013bae9dc0a2","modified":1593749595491},{"_id":"themes/next/layout/_scripts/schemes/mist.njk","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1593749595491},{"_id":"themes/next/layout/_scripts/schemes/muse.njk","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1593749595491},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1593749595491},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1593749595492},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1593749595492},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"d87df68dff14cfb4d91a77230cd1ac795c2a22d5","modified":1593749595492},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1593749595492},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1593749595492},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1593749595492},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"3c5f025e21adcfe95d158e0e0d7c6ed599d4ba7f","modified":1593749595493},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"363fdcd9cc7f68755782ec2c6b73e722bb13b8aa","modified":1593749595493},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1593749595493},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1593749595493},{"_id":"themes/next/layout/_third-party/comments/valine.njk","hash":"d446d8e5a1d6edf27a2804c3324266b462d5d52b","modified":1593749595493},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"816e8b86aeadc643bc5eb4531494f4cf7d07d096","modified":1593749595493},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1593749595493},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"ebe401bf5727d3477c168e081ecc608539aede73","modified":1593749595494},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"4962780cb19e6372ebbf73b6cd7a6768fe4e0194","modified":1593749595494},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1593749595494},{"_id":"themes/next/layout/_third-party/search/swiftype.njk","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1593749595494},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1593749595494},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.njk","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1593749595495},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1593749595495},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"8b956fb56284e8fa4a4731b1efd1f25e1b2b4a78","modified":1593749595495},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"0217e3334eb4fe53db0f4b7659f6b0e2f0a21b4f","modified":1593749595495},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1593749595495},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"fa5e919857eefd7821a7d128c72b099c0b931e50","modified":1593749595495},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b2254eeb33356634f6ad13eebe6e0453738099c8","modified":1593749595497},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"47b8db1a5f759d89f319f89b48ad696f1f17cb6e","modified":1593749595497},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1593749595497},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"cfbfe046f509061aab0a12653fbf1c2615fd92bc","modified":1593749595497},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"0cafda6af06b684d752c92cfa8585d21bf17612d","modified":1593749595497},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1593749595497},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1593749595497},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"512da6ed3debb47eac1a40e4a65ff461e41e6a00","modified":1593749595498},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"f6e8945702b095ced1211ea73cf651ad8b371c69","modified":1593749595498},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"af6f59a8053c2bb733472d2fda0e3d6e3a78e0c5","modified":1593749595498},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"2715180a3971750cc2ec746d04bd18f2c71fcfbb","modified":1593749595498},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"a2887232ecb2395b92d05907990c1b45ddbcace0","modified":1593749595498},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1593749595515},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"7bfc0d32403b1df115ed73f2166c9c36fdf08dac","modified":1593749595515},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1593749595516},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1593749595516},{"_id":"themes/next/source/css/_variables/base.styl","hash":"38b19b8218e3169415820a765155a4e6b826b692","modified":1593749595516},{"_id":"themes/next/source/js/schemes/muse.js","hash":"393a2d4b20cf74b8caa85404f7b99a5e17d4489d","modified":1593749595520},{"_id":"themes/next/source/lib/animate-css/animate.min.css","hash":"69dabbdfb4dec96ce66d129a73c38eb2725cee46","modified":1593749595520},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1593749595501},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"5273e880710578fcbb88246a40a21e8a23308d56","modified":1593749595502},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8fc244324820ab7a20ec1b42f3870639b9ed0404","modified":1593749595502},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"ee8fb8348aa76a9b346927ba4cae5666d8d777f7","modified":1593749595505},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"121497ccbc6942504b8d7f9b9721caeddb6ac364","modified":1593749595507},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7f09fca4464cc21b3295236b400aef75b2f42465","modified":1593749595507},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4410f53aff090ac9d78dd930a7fb09b7851895a7","modified":1593749595508},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1593749595508},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1593749595509},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1593749595509},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b1fcffa449c5c72c9b4793e23cec36d27a9db970","modified":1593749595509},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1593749595509},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1593749595510},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"4b25c4ea4fc0f7da20e5ecbb8fb527b3743ecdb2","modified":1593749595511},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"045139754c85421cd81f3506ec2295932a70e52a","modified":1593749595512},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"06786e1ed8774f8f08cbfc711296cf189aaf1b8c","modified":1593749595512},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"3909cbc0e620dbb8fef273d365d1c7306a4e30ac","modified":1593749595512},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f6d165dae928c12bde3f271d299a93b334116433","modified":1593749595512},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"493b0e696544a95601d0cfc5adcd10fbaa09da78","modified":1593749595513},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1593749595513},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"aacb1c61c79ce2fc0f8ea1ae47a5f15e87d6bc28","modified":1593749595513},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"ee82f865aa929fd40a84a5977605cce76c8b3f21","modified":1593749595513},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c706733f5196776fe2657a9bebe0a727cf8fe8e5","modified":1593749595513},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"c14be8e0689e71aa26abf01ac9870d7f8cfed440","modified":1593749595514},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1593749595514},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1593749595514},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"412a74a2058718da78bfba06895fc0e6c13e4045","modified":1593749595514},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2d92e82d4eaf8036e26ef7e242fd310ad7851a01","modified":1593749595514},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"427ea4aeeca62bd325eb20bc5c9984c779933f8f","modified":1593749595515},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"8e5750ff93a1bd02ebfe2601f60bf21ead8d75b0","modified":1593749595515},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"6cfe2ec269fd004690ea449ce351e606538a5143","modified":1593749595515},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1593749595515},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1593749595521},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1593749595522},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1593749595521},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1593749595522},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1593749595502},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1593749595502},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1593749595502},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"7165f38fec257621683d2ad6610d5b564fe71586","modified":1593749595503},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1593749595503},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"40c4dce5555ab0524295a67a55d40eba331317ef","modified":1593749595503},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1593749595503},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"def56acff9d64fc208a4836cdb6a4397c751f20b","modified":1593749595503},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"42a19a9dca4e0a271a8e0a904a269cb9ffd2c023","modified":1593749595504},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1593749595504},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"160433d23f29bbbbe29a9d6560f961a88fc00c94","modified":1593749595504},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"cf0b7d94ace7307fad29d0c04112848d36b512c7","modified":1593749595504},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"55d5eeb6cf92ba94d8514b3364df67c73bcd1554","modified":1593749595504},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"c119e4c432edc40fa508afb508bdee02cdd8ac86","modified":1593749595504},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1593749595504},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1593749595504},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1593749595504},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"feb398f03293850a5e9a7e9c624b2575389b15a6","modified":1593749595505},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1593749595505},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"48ee817d05ddc788423d7f10e9823e23fda81d04","modified":1593749595505},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1593749595505},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"abe3e895cb30c7827105efbe432fef8d5d977122","modified":1593749595505},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"998f47e85d7e2930bb44973c5b37d625f97a535e","modified":1593749595505},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"9614a5bf37afe2db6027949886accaeb3db3a4c0","modified":1593749595506},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"254e781e7b25e31a1a589c8b38dc608802f1cc6e","modified":1593749595506},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"8cb89864e8245a356d08ef0fee3133810f646fea","modified":1593749595506},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1593749595506},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"6d8afd8e23c40bb2b2a2edbe4eb0d2671cd81188","modified":1593749595506},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"57e6b5d82a2d85cabfc7275eb0ac758f3c06991d","modified":1593749595506},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"e0902db765083184212f6a20d32b9461d151d5ac","modified":1593749595506},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"66782e68f1c74a7d0aecef20e2ca16bbe6b52592","modified":1593749595507},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1593749595507},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1593749595507},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1593749595507},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"a1acdceb62c9e93d3c1e27c23f515bd85653504f","modified":1593749595507},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"55060cade4547779ba5996643d93763373b5127c","modified":1593749595507},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"469855a72d2c2b63a21df8fbcb8cc41d32cb9bde","modified":1593749595508},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"fee78f4607156574618ab4b50726d76f81de9c30","modified":1593749595508},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"43f7d37948232553873ee346d625457bfe704e74","modified":1593749595508},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"fefc81b13bff91bef122c72dfd39065dc3cb7b95","modified":1593749595508},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"6aeb912afa7c09db4f445fa631ee284552c57781","modified":1593749595509},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"76ecb2b10de331141f901b3019e260b830cdbe7f","modified":1593749595509},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1593749595510},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1593749595510},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"f09bc97e3681d73c38d7d3c5c271486c2c6537e2","modified":1593749595510},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"bec144a65d69563eb147f0888099351adb975e5a","modified":1593749595510},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"20a117260a1b26b4ec721790cff8b8e6cc6b3038","modified":1593749595510},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1593749595510},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"c4c9c203295f6c074103429c7ff5d60b50bc869e","modified":1593749595511},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"22be1538df3defd8e2d0f6546922fc1a9e527fa4","modified":1593749595511},{"_id":"source/_posts/build-xgboost-in-R-with-gpu-support.md","hash":"d6a35cb9bdc02147c5c9139c593c4aca16562cef","modified":1594267353711},{"_id":"public/atom.xml","hash":"bbcba6cc3ae7d6703dd20bed57c055ee26033a2b","modified":1594267581168},{"_id":"public/about/index.html","hash":"a6a6c5730e345829e6afd2affb048ec476abf08e","modified":1594267581168},{"_id":"public/tags/index.html","hash":"3da1322b73750f9f8c563428d0bf6946674b9459","modified":1594267581168},{"_id":"public/2020-07-03-buildpacks.html","hash":"494e37dcd6b290965597125c2993d0f1585f50c4","modified":1594267581168},{"_id":"public/2019-08-03-build-xgboost-in-R-with-gpu-support.html","hash":"4dd8970162dd8cd08d44856f4a66c66c93c4333b","modified":1594267581168},{"_id":"public/wishlist/index.html","hash":"cc1f6d01900853390c7dcb7c489544a2457bb647","modified":1594267581168},{"_id":"public/2019-07-20-decsion-tree.html","hash":"9c6a1a15ebae7a2f579c265f42963fb0924cc9c1","modified":1594267581168},{"_id":"public/2019-03-26-recommend-git.html","hash":"83aff809a4a2742686a89e01be4b590459877ac3","modified":1594267581168},{"_id":"public/2017-12-24-ubuntu16-04-install-cuda8-cudnn6-tensorflow.html","hash":"b1dfc2265f4aebcc9b0779493b21c61b07ef4d2e","modified":1594267581168},{"_id":"public/index.html","hash":"c1f1b40d027b0d8b78f20614cc8a70d2f91ef26f","modified":1594267581168},{"_id":"public/archives/index.html","hash":"7039c98f472167746f1883a4e249ee7b8dc0baf7","modified":1594267581168},{"_id":"public/archives/2017/index.html","hash":"577aa9ad3386a92ead7a4d00ce48f69eac84cdeb","modified":1594267581168},{"_id":"public/archives/2019/index.html","hash":"0264577dfc72cef9af33ab11868d3cc8692e1de9","modified":1594267581168},{"_id":"public/archives/2019/07/index.html","hash":"d5bb3033c034ab67f62a8c4546c5649c97b67db8","modified":1594267581168},{"_id":"public/archives/2017/12/index.html","hash":"5999305a5543560fbf627e308ffedc76add2bfd9","modified":1594267581168},{"_id":"public/archives/2019/08/index.html","hash":"b44f071cf86a1d4b825730cbb1ee97b5b7961e0a","modified":1594267581168},{"_id":"public/archives/2019/03/index.html","hash":"bd4e9420b3cae14c8e5088b94cc7805f0942f718","modified":1594267581168},{"_id":"public/archives/2020/index.html","hash":"bb491b6674f18ddbeb04af4659cf9ff12dbb765f","modified":1594267581168},{"_id":"public/archives/2020/07/index.html","hash":"f76b27aab5cad4c30a21c1b972edffe784aeb682","modified":1594267581168},{"_id":"public/tags/ubuntu/index.html","hash":"f914602911b9fee80770c7405aff90689a092b85","modified":1594267581168},{"_id":"public/tags/vps/index.html","hash":"b58ed376eef07ff9a1074e2919d36cdacef4071b","modified":1594267581168},{"_id":"public/tags/cuda/index.html","hash":"cb65747172002904463d7323f8776f330608a049","modified":1594267581168},{"_id":"public/tags/git/index.html","hash":"00125fd8ade34b318d25ea1c85ad1eb2e2c52f09","modified":1594267581168},{"_id":"public/tags/cudnn/index.html","hash":"5c0da710a6348290e197cba3bc828449343e5c20","modified":1594267581168},{"_id":"public/tags/tree-methods/index.html","hash":"2cb78518dcb312c7a4c607d361b43973b70e78a6","modified":1594267581168},{"_id":"public/tags/buildpacks/index.html","hash":"307a7c0c5a0047c77a1904a354406e4bc93e8970","modified":1594267581168},{"_id":"public/tags/machine-learning/index.html","hash":"0b54570b9fbf68cfa0932f7374ca761a0eb7a483","modified":1594267581168},{"_id":"public/tags/docker/index.html","hash":"db1b0bba6677b4ad343ed38248c8a59520cceb79","modified":1594267581168},{"_id":"public/tags/CI-CD/index.html","hash":"b49df9014efe3b4eca1d3a7e9cec9af8e9c4506c","modified":1594267581168},{"_id":"public/tags/xgboost/index.html","hash":"ac3ea1190a045fecb911455f945120775cb23c1c","modified":1594267581168},{"_id":"public/tags/R-package/index.html","hash":"e8cb5a54042e08285809eae6c724afc787df12ef","modified":1594267581168},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1594267581168},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1594267581168},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1594267581168},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1594267581168},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1594267581168},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1594267581168},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1594267581168},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1594267581168},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1594267581168},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1594267581168},{"_id":"public/CNAME","hash":"77586052d0986059bf3c7ae25f3dd67e65008bd1","modified":1594267581168},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1594267581168},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1594267581168},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1594267581168},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1594267581168},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1594267581168},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1594267581168},{"_id":"public/css/main.css","hash":"acde15acca7caa76359d31f59ffc87cd6fb6cae8","modified":1594267581168},{"_id":"public/js/next-boot.js","hash":"ec02da452e37443fd246e7d9b91366a29ce674be","modified":1594267581168},{"_id":"public/js/motion.js","hash":"ee92c0fd8450b237a67198d979fcb8b7e379fab9","modified":1594267581168},{"_id":"public/js/utils.js","hash":"615a2f51203e6676d0ed5cb81241cfe16192d885","modified":1594267581168},{"_id":"public/lib/animate-css/animate.min.css","hash":"69dabbdfb4dec96ce66d129a73c38eb2725cee46","modified":1594267581168},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1594267581168},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1594267581168}],"Category":[],"Data":[],"Page":[{"title":"关于","date":"2017-04-25T08:29:02.000Z","_content":"\n# Alfred Cai\n\n- 码农\n- 理想：有台自己赚来的法拉利，然后辞职\n\n# 愿望清单\n\n只是为了和人分享自己的喜好[愿望清单](/wishlist/)\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-04-25 16:29:02\n---\n\n# Alfred Cai\n\n- 码农\n- 理想：有台自己赚来的法拉利，然后辞职\n\n# 愿望清单\n\n只是为了和人分享自己的喜好[愿望清单](/wishlist/)\n","updated":"2020-07-03T03:51:48.958Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckc5pryur000189k0a1f4gl8p","content":"<h1 id=\"Alfred-Cai\"><a href=\"#Alfred-Cai\" class=\"headerlink\" title=\"Alfred Cai\"></a>Alfred Cai</h1><ul>\n<li>码农</li>\n<li>理想：有台自己赚来的法拉利，然后辞职</li>\n</ul>\n<h1 id=\"愿望清单\"><a href=\"#愿望清单\" class=\"headerlink\" title=\"愿望清单\"></a>愿望清单</h1><p>只是为了和人分享自己的喜好<a href=\"/wishlist/\">愿望清单</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Alfred-Cai\"><a href=\"#Alfred-Cai\" class=\"headerlink\" title=\"Alfred Cai\"></a>Alfred Cai</h1><ul>\n<li>码农</li>\n<li>理想：有台自己赚来的法拉利，然后辞职</li>\n</ul>\n<h1 id=\"愿望清单\"><a href=\"#愿望清单\" class=\"headerlink\" title=\"愿望清单\"></a>愿望清单</h1><p>只是为了和人分享自己的喜好<a href=\"/wishlist/\">愿望清单</a></p>\n"},{"title":"tags","date":"2019-04-07T15:54:48.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-04-07 23:54:48\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-07-03T03:51:48.958Z","path":"tags/index.html","layout":"page","_id":"ckc5pryut000389k0g3je82jd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"愿望清单","date":"2017-04-25T08:29:02.000Z","_content":"\n## 键盘\n\n- [ ] hhkb\n- [x] Leopold FC660M\n\n## 鼠标\n\n- [x] logitech MX master 2s\n\n## 电脑组件\n\n- [x] Samsuang 970 evo\n- [x] Samsuang 960 evo\n\n## 耳机\n\n- [ ] Master&Dynamic\n- [ ] Bose QC35 II\n\n## 汽车\n\n- [ ] 大众 GOLF GTI\n- [ ] 斯巴鲁 BRZ\n- [ ] 法拉利 488 spider\n- [ ] ~~奥迪 s3~~\n\n## 域名\n\n- [ ] socialwith.cz\n- [ ] mylolita.cz\n- [x] alfredcai.cz\n\n## 酒\n\n- [x] Johnnie Walker Black label\n- [x] Chivas 12\n- [x] Chivas 18\n- [ ] three monkeys\n\n## 家用\n\n- [ ] 珐琅锅\n- [x] 电动牙刷\n- [ ] evasolo 玻璃瓶\n\n## 书籍\n\n- [x] 往事并不如烟 章诒和\n- [x] 伶人往事 章诒和\n\n## 软件\n\n- [ ] airserver mac-app\n","source":"wishlist/index.md","raw":"---\ntitle: 愿望清单\ndate: 2017-04-25 16:29:02\n---\n\n## 键盘\n\n- [ ] hhkb\n- [x] Leopold FC660M\n\n## 鼠标\n\n- [x] logitech MX master 2s\n\n## 电脑组件\n\n- [x] Samsuang 970 evo\n- [x] Samsuang 960 evo\n\n## 耳机\n\n- [ ] Master&Dynamic\n- [ ] Bose QC35 II\n\n## 汽车\n\n- [ ] 大众 GOLF GTI\n- [ ] 斯巴鲁 BRZ\n- [ ] 法拉利 488 spider\n- [ ] ~~奥迪 s3~~\n\n## 域名\n\n- [ ] socialwith.cz\n- [ ] mylolita.cz\n- [x] alfredcai.cz\n\n## 酒\n\n- [x] Johnnie Walker Black label\n- [x] Chivas 12\n- [x] Chivas 18\n- [ ] three monkeys\n\n## 家用\n\n- [ ] 珐琅锅\n- [x] 电动牙刷\n- [ ] evasolo 玻璃瓶\n\n## 书籍\n\n- [x] 往事并不如烟 章诒和\n- [x] 伶人往事 章诒和\n\n## 软件\n\n- [ ] airserver mac-app\n","updated":"2020-07-03T03:51:48.959Z","path":"wishlist/index.html","comments":1,"layout":"page","_id":"ckc5pryux000689k001w839ce","content":"<h2 id=\"键盘\"><a href=\"#键盘\" class=\"headerlink\" title=\"键盘\"></a>键盘</h2><ul>\n<li>[ ] hhkb</li>\n<li>[x] Leopold FC660M</li>\n</ul>\n<h2 id=\"鼠标\"><a href=\"#鼠标\" class=\"headerlink\" title=\"鼠标\"></a>鼠标</h2><ul>\n<li>[x] logitech MX master 2s</li>\n</ul>\n<h2 id=\"电脑组件\"><a href=\"#电脑组件\" class=\"headerlink\" title=\"电脑组件\"></a>电脑组件</h2><ul>\n<li>[x] Samsuang 970 evo</li>\n<li>[x] Samsuang 960 evo</li>\n</ul>\n<h2 id=\"耳机\"><a href=\"#耳机\" class=\"headerlink\" title=\"耳机\"></a>耳机</h2><ul>\n<li>[ ] Master&amp;Dynamic</li>\n<li>[ ] Bose QC35 II</li>\n</ul>\n<h2 id=\"汽车\"><a href=\"#汽车\" class=\"headerlink\" title=\"汽车\"></a>汽车</h2><ul>\n<li>[ ] 大众 GOLF GTI</li>\n<li>[ ] 斯巴鲁 BRZ</li>\n<li>[ ] 法拉利 488 spider</li>\n<li>[ ] <del>奥迪 s3</del></li>\n</ul>\n<h2 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h2><ul>\n<li>[ ] socialwith.cz</li>\n<li>[ ] mylolita.cz</li>\n<li>[x] alfredcai.cz</li>\n</ul>\n<h2 id=\"酒\"><a href=\"#酒\" class=\"headerlink\" title=\"酒\"></a>酒</h2><ul>\n<li>[x] Johnnie Walker Black label</li>\n<li>[x] Chivas 12</li>\n<li>[x] Chivas 18</li>\n<li>[ ] three monkeys</li>\n</ul>\n<h2 id=\"家用\"><a href=\"#家用\" class=\"headerlink\" title=\"家用\"></a>家用</h2><ul>\n<li>[ ] 珐琅锅</li>\n<li>[x] 电动牙刷</li>\n<li>[ ] evasolo 玻璃瓶</li>\n</ul>\n<h2 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h2><ul>\n<li>[x] 往事并不如烟 章诒和</li>\n<li>[x] 伶人往事 章诒和</li>\n</ul>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><ul>\n<li>[ ] airserver mac-app</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"键盘\"><a href=\"#键盘\" class=\"headerlink\" title=\"键盘\"></a>键盘</h2><ul>\n<li>[ ] hhkb</li>\n<li>[x] Leopold FC660M</li>\n</ul>\n<h2 id=\"鼠标\"><a href=\"#鼠标\" class=\"headerlink\" title=\"鼠标\"></a>鼠标</h2><ul>\n<li>[x] logitech MX master 2s</li>\n</ul>\n<h2 id=\"电脑组件\"><a href=\"#电脑组件\" class=\"headerlink\" title=\"电脑组件\"></a>电脑组件</h2><ul>\n<li>[x] Samsuang 970 evo</li>\n<li>[x] Samsuang 960 evo</li>\n</ul>\n<h2 id=\"耳机\"><a href=\"#耳机\" class=\"headerlink\" title=\"耳机\"></a>耳机</h2><ul>\n<li>[ ] Master&amp;Dynamic</li>\n<li>[ ] Bose QC35 II</li>\n</ul>\n<h2 id=\"汽车\"><a href=\"#汽车\" class=\"headerlink\" title=\"汽车\"></a>汽车</h2><ul>\n<li>[ ] 大众 GOLF GTI</li>\n<li>[ ] 斯巴鲁 BRZ</li>\n<li>[ ] 法拉利 488 spider</li>\n<li>[ ] <del>奥迪 s3</del></li>\n</ul>\n<h2 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h2><ul>\n<li>[ ] socialwith.cz</li>\n<li>[ ] mylolita.cz</li>\n<li>[x] alfredcai.cz</li>\n</ul>\n<h2 id=\"酒\"><a href=\"#酒\" class=\"headerlink\" title=\"酒\"></a>酒</h2><ul>\n<li>[x] Johnnie Walker Black label</li>\n<li>[x] Chivas 12</li>\n<li>[x] Chivas 18</li>\n<li>[ ] three monkeys</li>\n</ul>\n<h2 id=\"家用\"><a href=\"#家用\" class=\"headerlink\" title=\"家用\"></a>家用</h2><ul>\n<li>[ ] 珐琅锅</li>\n<li>[x] 电动牙刷</li>\n<li>[ ] evasolo 玻璃瓶</li>\n</ul>\n<h2 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h2><ul>\n<li>[x] 往事并不如烟 章诒和</li>\n<li>[x] 伶人往事 章诒和</li>\n</ul>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><ul>\n<li>[ ] airserver mac-app</li>\n</ul>\n"}],"Post":[{"title":"为什么要用 git","date":"2019-03-25T16:00:00.000Z","author":"alfred.cai","_content":"很多朋友包括我，一提起 git 首先想到的是 GitHub，以及 GitHub 后面所代表的丰富的社区和代码分享。但是我今天想说的是，即使你的代码甚至是文件不是准备用来分享的，也推荐使用 git。\n<!-- more -->\n## 版本控制\n\n现在在个人的 vps 上，我的文件夹都会在本地布置一个 git 作为版本控制。因为 git 帮我解决了一下的问题：\n\n- 两次登录时间间隔太长，上次登录所操作的文件已经不记得了。我用 `git commit` 中记录本次操作的大致内容和想法，`git log` 来查看之前的操作。\n- 服务器上的文件修改会直接影响到许多正在运行的系统，每次操作都需要进行备份和回滚。git 同样可以实现这一点，`git commit `在我看来相当于对文件进行快照，在紧急情况下，可以回滚到之前的提交，并且还能保留当前未保存的文件，确认清楚后再重新提交\n\n## 文件对比 diff\n\n不管是在服务器上还是本地文件，相同文件的个别地方差异总是让人很难过，找起来也很恼人。Word 等二进制文件没办法，只能通过网页版的 diff online 进行查找，但是对于纯文本类型的文件，可以直接在命令行下进行比较，许多的文档编辑器也支持按行比较，方便而且直观。\n","source":"_posts/recommend-git.md","raw":"---\ntitle: 为什么要用 git\ndate: 2019-03-26\ntags: \n - git\n - vps\nauthor: alfred.cai\n---\n很多朋友包括我，一提起 git 首先想到的是 GitHub，以及 GitHub 后面所代表的丰富的社区和代码分享。但是我今天想说的是，即使你的代码甚至是文件不是准备用来分享的，也推荐使用 git。\n<!-- more -->\n## 版本控制\n\n现在在个人的 vps 上，我的文件夹都会在本地布置一个 git 作为版本控制。因为 git 帮我解决了一下的问题：\n\n- 两次登录时间间隔太长，上次登录所操作的文件已经不记得了。我用 `git commit` 中记录本次操作的大致内容和想法，`git log` 来查看之前的操作。\n- 服务器上的文件修改会直接影响到许多正在运行的系统，每次操作都需要进行备份和回滚。git 同样可以实现这一点，`git commit `在我看来相当于对文件进行快照，在紧急情况下，可以回滚到之前的提交，并且还能保留当前未保存的文件，确认清楚后再重新提交\n\n## 文件对比 diff\n\n不管是在服务器上还是本地文件，相同文件的个别地方差异总是让人很难过，找起来也很恼人。Word 等二进制文件没办法，只能通过网页版的 diff online 进行查找，但是对于纯文本类型的文件，可以直接在命令行下进行比较，许多的文档编辑器也支持按行比较，方便而且直观。\n","slug":"recommend-git","published":1,"updated":"2020-07-09T04:03:33.649Z","_id":"ckc5pryuk000089k02gycetnq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>很多朋友包括我，一提起 git 首先想到的是 GitHub，以及 GitHub 后面所代表的丰富的社区和代码分享。但是我今天想说的是，即使你的代码甚至是文件不是准备用来分享的，也推荐使用 git。<br><a id=\"more\"></a></p>\n<h2 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h2><p>现在在个人的 vps 上，我的文件夹都会在本地布置一个 git 作为版本控制。因为 git 帮我解决了一下的问题：</p>\n<ul>\n<li>两次登录时间间隔太长，上次登录所操作的文件已经不记得了。我用 <code>git commit</code> 中记录本次操作的大致内容和想法，<code>git log</code> 来查看之前的操作。</li>\n<li>服务器上的文件修改会直接影响到许多正在运行的系统，每次操作都需要进行备份和回滚。git 同样可以实现这一点，<code>git commit</code>在我看来相当于对文件进行快照，在紧急情况下，可以回滚到之前的提交，并且还能保留当前未保存的文件，确认清楚后再重新提交</li>\n</ul>\n<h2 id=\"文件对比-diff\"><a href=\"#文件对比-diff\" class=\"headerlink\" title=\"文件对比 diff\"></a>文件对比 diff</h2><p>不管是在服务器上还是本地文件，相同文件的个别地方差异总是让人很难过，找起来也很恼人。Word 等二进制文件没办法，只能通过网页版的 diff online 进行查找，但是对于纯文本类型的文件，可以直接在命令行下进行比较，许多的文档编辑器也支持按行比较，方便而且直观。</p>\n","site":{"data":{}},"excerpt":"<p>很多朋友包括我，一提起 git 首先想到的是 GitHub，以及 GitHub 后面所代表的丰富的社区和代码分享。但是我今天想说的是，即使你的代码甚至是文件不是准备用来分享的，也推荐使用 git。<br>","more":"</p>\n<h2 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h2><p>现在在个人的 vps 上，我的文件夹都会在本地布置一个 git 作为版本控制。因为 git 帮我解决了一下的问题：</p>\n<ul>\n<li>两次登录时间间隔太长，上次登录所操作的文件已经不记得了。我用 <code>git commit</code> 中记录本次操作的大致内容和想法，<code>git log</code> 来查看之前的操作。</li>\n<li>服务器上的文件修改会直接影响到许多正在运行的系统，每次操作都需要进行备份和回滚。git 同样可以实现这一点，<code>git commit</code>在我看来相当于对文件进行快照，在紧急情况下，可以回滚到之前的提交，并且还能保留当前未保存的文件，确认清楚后再重新提交</li>\n</ul>\n<h2 id=\"文件对比-diff\"><a href=\"#文件对比-diff\" class=\"headerlink\" title=\"文件对比 diff\"></a>文件对比 diff</h2><p>不管是在服务器上还是本地文件，相同文件的个别地方差异总是让人很难过，找起来也很恼人。Word 等二进制文件没办法，只能通过网页版的 diff online 进行查找，但是对于纯文本类型的文件，可以直接在命令行下进行比较，许多的文档编辑器也支持按行比较，方便而且直观。</p>"},{"title":"在Ubuntu16.04上安装Cuda 8.0和 cuDNN 6.0","date":"2017-12-24T15:38:58.000Z","author":"alfred.cai","_content":"安装tensorflow教程较多较杂，于是自己记录了一份。\n<!-- more -->\n由于现在Nvidia的cuda已经默认是9.0版本了，但是tensorflow还是只支持到cuda8和 cuDNN6。所以本教程也是根据tensorflow选择了老版本。\n\n- 系统版本：Ubuntu-GNOME 16.04\n- 显卡：Nviida 1070Ti\n\n## 0安装 cuda8.0\n\n很多教程都是先安装显卡驱动，再运行.run 文件的。在自己安装了几次之后个人还是喜欢下载.deb 文件，包管理器会自动安装显卡驱动的。\n\n官网默认是cuda9，所以需要在[https://developer.nvidia.com/cuda-toolkit-archive](https://developer.nvidia.com/cuda-toolkit-archive)找到8.0版本。\n我们就点 cuda-80-ga2 ==> Linux ==> x86_64 ==> 16.04 ==> deb(local) 或者 deb(network)\n下载“cuda-repo-ubuntu1604_8.0.61-1_amd64.deb”\n\n```bash\nsudo dpkg -i cuda-repo-ubuntu1604_8.0.61-1_amd64.deb\nsudo apt-get update\nsudo apt-get install cuda-8-0\n```\n\n注意，其他教程里写的都是install cuda，但是我们不是安装最新的cuda，要选择成cuda-8-0\n\n安装好之后建议重启一下，因为显卡驱动必须重启一下还能正常使用\n\n### 配置cuda\n\n我用的是zsh，所以是在.zshrc 里配置。默认的是bash，只需把.zshrc改成.bashrc就行了\n\n```bash\nnano .zshrc\n```\n\n在.zshrc的最前面写入环境变量的配置\n\n```bash\nexport CUDA_HOME=/usr/local/cuda-8.0\nexport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH\nexport PATH=/usr/local/cuda-8.0/bin:$PATH\n```\n\n重新载入.zshrc\n\n```bash\nsource .zshrc\n```\n\n### 测试cuda和显卡驱动\n\n检查cuda的环境变量是否配置成功\n\n```bash\nnvcc --version\n```\n\n进入cuda代码样例(默认在用户文件夹下)检查显卡驱动是否安装成功\n\n```bash\ncd /home/*/NVIDIA_CUDA-8.0_Samples/1_Utilities/deviceQuery\nmake -j\n./deviceQuery\n```\n\n## 1安装cuDNN6\n\n安装cuDNN需要注册一个Nvidia的开发者帐号，当然也是免费的。网址[https://developer.nvidia.com/rdp/cuDNN-download](https://developer.nvidia.com/rdp/cuDNN-download)\n\n注意要下载”Download cuDNN v6.0 (April 27, 2017), for CUDA 8.0“ ==> \"cuDNN v6.0 Library for Linux\"\n\n```bash\ntar -xzvf cuDNN-8.0-linux-x64-v6.0.tgz \nsudo cp include/cuDNN.h /usr/local/cuda/include/\nsudo cp lib64/* /usr/local/cuda/lib64/\n```\n\n注意lib64里面其实只有两个文件，还有两个是软链接，复制后需要重新制作软链\n\n```bash\ncd /usr/local/cuda/lib64/\nsudo rm -rf libcuDNN.so libcuDNN.so.6\nsudo ln -s libcuDNN.so.6.0.21 libcuDNN.so.6\nsudo ln -s libcuDNN.so.6 libcuDNN.so\n```\n\n## 2安装tensorflow\n\n跟着官网去安装就好了，没有什么需要配置的内容了。\n\n### 当然先建议将apt和pypi的安装源切换到国内源\n\n个人常用的是清华的源[https://mirrors.tuna.tsinghua.edu.cn/help/pypi/](https://mirrors.tuna.tsinghua.edu.cn/help/pypi/)\n\n当然推荐一下母校的源，虽然这个是在我毕业之后才有的。。。[https://mirrors.shu.edu.cn/help/pypi.html](https://mirrors.shu.edu.cn/help/pypi.html)\n\n### 安装方式纠结\n\n会有人去纠结用virtualenv还是pip安装，个人的想法是如果一直都要用的可以用pip。如果是抱着试一试的心态，或是有处女座洁癖的码农可以用virtualenv，它可以创建出一个独立的python第三方库的环境。正式的一个项目或是网上下载的项目，建议还是用virtualenv，独立的环境能避免一些没必要的版本问题。\n","source":"_posts/ubuntu16-04-install-cuda8-cudnn6-tensorflow.md","raw":"---\ntitle: 在Ubuntu16.04上安装Cuda 8.0和 cuDNN 6.0\ndate: 2017-12-24 23:38:58\ntags: \n - ubuntu\n - cuda\n - cudnn\nauthor: alfred.cai\n---\n安装tensorflow教程较多较杂，于是自己记录了一份。\n<!-- more -->\n由于现在Nvidia的cuda已经默认是9.0版本了，但是tensorflow还是只支持到cuda8和 cuDNN6。所以本教程也是根据tensorflow选择了老版本。\n\n- 系统版本：Ubuntu-GNOME 16.04\n- 显卡：Nviida 1070Ti\n\n## 0安装 cuda8.0\n\n很多教程都是先安装显卡驱动，再运行.run 文件的。在自己安装了几次之后个人还是喜欢下载.deb 文件，包管理器会自动安装显卡驱动的。\n\n官网默认是cuda9，所以需要在[https://developer.nvidia.com/cuda-toolkit-archive](https://developer.nvidia.com/cuda-toolkit-archive)找到8.0版本。\n我们就点 cuda-80-ga2 ==> Linux ==> x86_64 ==> 16.04 ==> deb(local) 或者 deb(network)\n下载“cuda-repo-ubuntu1604_8.0.61-1_amd64.deb”\n\n```bash\nsudo dpkg -i cuda-repo-ubuntu1604_8.0.61-1_amd64.deb\nsudo apt-get update\nsudo apt-get install cuda-8-0\n```\n\n注意，其他教程里写的都是install cuda，但是我们不是安装最新的cuda，要选择成cuda-8-0\n\n安装好之后建议重启一下，因为显卡驱动必须重启一下还能正常使用\n\n### 配置cuda\n\n我用的是zsh，所以是在.zshrc 里配置。默认的是bash，只需把.zshrc改成.bashrc就行了\n\n```bash\nnano .zshrc\n```\n\n在.zshrc的最前面写入环境变量的配置\n\n```bash\nexport CUDA_HOME=/usr/local/cuda-8.0\nexport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH\nexport PATH=/usr/local/cuda-8.0/bin:$PATH\n```\n\n重新载入.zshrc\n\n```bash\nsource .zshrc\n```\n\n### 测试cuda和显卡驱动\n\n检查cuda的环境变量是否配置成功\n\n```bash\nnvcc --version\n```\n\n进入cuda代码样例(默认在用户文件夹下)检查显卡驱动是否安装成功\n\n```bash\ncd /home/*/NVIDIA_CUDA-8.0_Samples/1_Utilities/deviceQuery\nmake -j\n./deviceQuery\n```\n\n## 1安装cuDNN6\n\n安装cuDNN需要注册一个Nvidia的开发者帐号，当然也是免费的。网址[https://developer.nvidia.com/rdp/cuDNN-download](https://developer.nvidia.com/rdp/cuDNN-download)\n\n注意要下载”Download cuDNN v6.0 (April 27, 2017), for CUDA 8.0“ ==> \"cuDNN v6.0 Library for Linux\"\n\n```bash\ntar -xzvf cuDNN-8.0-linux-x64-v6.0.tgz \nsudo cp include/cuDNN.h /usr/local/cuda/include/\nsudo cp lib64/* /usr/local/cuda/lib64/\n```\n\n注意lib64里面其实只有两个文件，还有两个是软链接，复制后需要重新制作软链\n\n```bash\ncd /usr/local/cuda/lib64/\nsudo rm -rf libcuDNN.so libcuDNN.so.6\nsudo ln -s libcuDNN.so.6.0.21 libcuDNN.so.6\nsudo ln -s libcuDNN.so.6 libcuDNN.so\n```\n\n## 2安装tensorflow\n\n跟着官网去安装就好了，没有什么需要配置的内容了。\n\n### 当然先建议将apt和pypi的安装源切换到国内源\n\n个人常用的是清华的源[https://mirrors.tuna.tsinghua.edu.cn/help/pypi/](https://mirrors.tuna.tsinghua.edu.cn/help/pypi/)\n\n当然推荐一下母校的源，虽然这个是在我毕业之后才有的。。。[https://mirrors.shu.edu.cn/help/pypi.html](https://mirrors.shu.edu.cn/help/pypi.html)\n\n### 安装方式纠结\n\n会有人去纠结用virtualenv还是pip安装，个人的想法是如果一直都要用的可以用pip。如果是抱着试一试的心态，或是有处女座洁癖的码农可以用virtualenv，它可以创建出一个独立的python第三方库的环境。正式的一个项目或是网上下载的项目，建议还是用virtualenv，独立的环境能避免一些没必要的版本问题。\n","slug":"ubuntu16-04-install-cuda8-cudnn6-tensorflow","published":1,"updated":"2020-07-09T04:03:28.209Z","_id":"ckc5pryus000289k0damiasr9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>安装tensorflow教程较多较杂，于是自己记录了一份。<br><a id=\"more\"></a><br>由于现在Nvidia的cuda已经默认是9.0版本了，但是tensorflow还是只支持到cuda8和 cuDNN6。所以本教程也是根据tensorflow选择了老版本。</p>\n<ul>\n<li>系统版本：Ubuntu-GNOME 16.04</li>\n<li>显卡：Nviida 1070Ti</li>\n</ul>\n<h2 id=\"0安装-cuda8-0\"><a href=\"#0安装-cuda8-0\" class=\"headerlink\" title=\"0安装 cuda8.0\"></a>0安装 cuda8.0</h2><p>很多教程都是先安装显卡驱动，再运行.run 文件的。在自己安装了几次之后个人还是喜欢下载.deb 文件，包管理器会自动安装显卡驱动的。</p>\n<p>官网默认是cuda9，所以需要在<a href=\"https://developer.nvidia.com/cuda-toolkit-archive\" target=\"_blank\" rel=\"noopener\">https://developer.nvidia.com/cuda-toolkit-archive</a>找到8.0版本。<br>我们就点 cuda-80-ga2 ==&gt; Linux ==&gt; x86_64 ==&gt; 16.04 ==&gt; deb(local) 或者 deb(network)<br>下载“cuda-repo-ubuntu1604_8.0.61-1_amd64.deb”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i cuda-repo-ubuntu1604_8.0.61-1_amd64.deb</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install cuda-8-0</span><br></pre></td></tr></table></figure>\n<p>注意，其他教程里写的都是install cuda，但是我们不是安装最新的cuda，要选择成cuda-8-0</p>\n<p>安装好之后建议重启一下，因为显卡驱动必须重启一下还能正常使用</p>\n<h3 id=\"配置cuda\"><a href=\"#配置cuda\" class=\"headerlink\" title=\"配置cuda\"></a>配置cuda</h3><p>我用的是zsh，所以是在.zshrc 里配置。默认的是bash，只需把.zshrc改成.bashrc就行了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano .zshrc</span><br></pre></td></tr></table></figure>\n<p>在.zshrc的最前面写入环境变量的配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> CUDA_HOME=/usr/<span class=\"built_in\">local</span>/cuda-8.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/<span class=\"built_in\">local</span>/cuda-8.0/lib64:<span class=\"variable\">$LD_LIBRARY_PATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/cuda-8.0/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n<p>重新载入.zshrc</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> .zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试cuda和显卡驱动\"><a href=\"#测试cuda和显卡驱动\" class=\"headerlink\" title=\"测试cuda和显卡驱动\"></a>测试cuda和显卡驱动</h3><p>检查cuda的环境变量是否配置成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc --version</span><br></pre></td></tr></table></figure>\n<p>进入cuda代码样例(默认在用户文件夹下)检查显卡驱动是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/*/NVIDIA_CUDA-8.0_Samples/1_Utilities/deviceQuery</span><br><span class=\"line\">make -j</span><br><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n<h2 id=\"1安装cuDNN6\"><a href=\"#1安装cuDNN6\" class=\"headerlink\" title=\"1安装cuDNN6\"></a>1安装cuDNN6</h2><p>安装cuDNN需要注册一个Nvidia的开发者帐号，当然也是免费的。网址<a href=\"https://developer.nvidia.com/rdp/cuDNN-download\" target=\"_blank\" rel=\"noopener\">https://developer.nvidia.com/rdp/cuDNN-download</a></p>\n<p>注意要下载”Download cuDNN v6.0 (April 27, 2017), for CUDA 8.0“ ==&gt; “cuDNN v6.0 Library for Linux”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf cuDNN-8.0-linux-x64-v6.0.tgz </span><br><span class=\"line\">sudo cp include/cuDNN.h /usr/<span class=\"built_in\">local</span>/cuda/include/</span><br><span class=\"line\">sudo cp lib64/* /usr/<span class=\"built_in\">local</span>/cuda/lib64/</span><br></pre></td></tr></table></figure>\n<p>注意lib64里面其实只有两个文件，还有两个是软链接，复制后需要重新制作软链</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/cuda/lib64/</span><br><span class=\"line\">sudo rm -rf libcuDNN.so libcuDNN.so.6</span><br><span class=\"line\">sudo ln -s libcuDNN.so.6.0.21 libcuDNN.so.6</span><br><span class=\"line\">sudo ln -s libcuDNN.so.6 libcuDNN.so</span><br></pre></td></tr></table></figure>\n<h2 id=\"2安装tensorflow\"><a href=\"#2安装tensorflow\" class=\"headerlink\" title=\"2安装tensorflow\"></a>2安装tensorflow</h2><p>跟着官网去安装就好了，没有什么需要配置的内容了。</p>\n<h3 id=\"当然先建议将apt和pypi的安装源切换到国内源\"><a href=\"#当然先建议将apt和pypi的安装源切换到国内源\" class=\"headerlink\" title=\"当然先建议将apt和pypi的安装源切换到国内源\"></a>当然先建议将apt和pypi的安装源切换到国内源</h3><p>个人常用的是清华的源<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/pypi/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a></p>\n<p>当然推荐一下母校的源，虽然这个是在我毕业之后才有的。。。<a href=\"https://mirrors.shu.edu.cn/help/pypi.html\" target=\"_blank\" rel=\"noopener\">https://mirrors.shu.edu.cn/help/pypi.html</a></p>\n<h3 id=\"安装方式纠结\"><a href=\"#安装方式纠结\" class=\"headerlink\" title=\"安装方式纠结\"></a>安装方式纠结</h3><p>会有人去纠结用virtualenv还是pip安装，个人的想法是如果一直都要用的可以用pip。如果是抱着试一试的心态，或是有处女座洁癖的码农可以用virtualenv，它可以创建出一个独立的python第三方库的环境。正式的一个项目或是网上下载的项目，建议还是用virtualenv，独立的环境能避免一些没必要的版本问题。</p>\n","site":{"data":{}},"excerpt":"<p>安装tensorflow教程较多较杂，于是自己记录了一份。<br>","more":"<br>由于现在Nvidia的cuda已经默认是9.0版本了，但是tensorflow还是只支持到cuda8和 cuDNN6。所以本教程也是根据tensorflow选择了老版本。</p>\n<ul>\n<li>系统版本：Ubuntu-GNOME 16.04</li>\n<li>显卡：Nviida 1070Ti</li>\n</ul>\n<h2 id=\"0安装-cuda8-0\"><a href=\"#0安装-cuda8-0\" class=\"headerlink\" title=\"0安装 cuda8.0\"></a>0安装 cuda8.0</h2><p>很多教程都是先安装显卡驱动，再运行.run 文件的。在自己安装了几次之后个人还是喜欢下载.deb 文件，包管理器会自动安装显卡驱动的。</p>\n<p>官网默认是cuda9，所以需要在<a href=\"https://developer.nvidia.com/cuda-toolkit-archive\" target=\"_blank\" rel=\"noopener\">https://developer.nvidia.com/cuda-toolkit-archive</a>找到8.0版本。<br>我们就点 cuda-80-ga2 ==&gt; Linux ==&gt; x86_64 ==&gt; 16.04 ==&gt; deb(local) 或者 deb(network)<br>下载“cuda-repo-ubuntu1604_8.0.61-1_amd64.deb”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i cuda-repo-ubuntu1604_8.0.61-1_amd64.deb</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install cuda-8-0</span><br></pre></td></tr></table></figure>\n<p>注意，其他教程里写的都是install cuda，但是我们不是安装最新的cuda，要选择成cuda-8-0</p>\n<p>安装好之后建议重启一下，因为显卡驱动必须重启一下还能正常使用</p>\n<h3 id=\"配置cuda\"><a href=\"#配置cuda\" class=\"headerlink\" title=\"配置cuda\"></a>配置cuda</h3><p>我用的是zsh，所以是在.zshrc 里配置。默认的是bash，只需把.zshrc改成.bashrc就行了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano .zshrc</span><br></pre></td></tr></table></figure>\n<p>在.zshrc的最前面写入环境变量的配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> CUDA_HOME=/usr/<span class=\"built_in\">local</span>/cuda-8.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/<span class=\"built_in\">local</span>/cuda-8.0/lib64:<span class=\"variable\">$LD_LIBRARY_PATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/cuda-8.0/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n<p>重新载入.zshrc</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> .zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试cuda和显卡驱动\"><a href=\"#测试cuda和显卡驱动\" class=\"headerlink\" title=\"测试cuda和显卡驱动\"></a>测试cuda和显卡驱动</h3><p>检查cuda的环境变量是否配置成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc --version</span><br></pre></td></tr></table></figure>\n<p>进入cuda代码样例(默认在用户文件夹下)检查显卡驱动是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/*/NVIDIA_CUDA-8.0_Samples/1_Utilities/deviceQuery</span><br><span class=\"line\">make -j</span><br><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n<h2 id=\"1安装cuDNN6\"><a href=\"#1安装cuDNN6\" class=\"headerlink\" title=\"1安装cuDNN6\"></a>1安装cuDNN6</h2><p>安装cuDNN需要注册一个Nvidia的开发者帐号，当然也是免费的。网址<a href=\"https://developer.nvidia.com/rdp/cuDNN-download\" target=\"_blank\" rel=\"noopener\">https://developer.nvidia.com/rdp/cuDNN-download</a></p>\n<p>注意要下载”Download cuDNN v6.0 (April 27, 2017), for CUDA 8.0“ ==&gt; “cuDNN v6.0 Library for Linux”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf cuDNN-8.0-linux-x64-v6.0.tgz </span><br><span class=\"line\">sudo cp include/cuDNN.h /usr/<span class=\"built_in\">local</span>/cuda/include/</span><br><span class=\"line\">sudo cp lib64/* /usr/<span class=\"built_in\">local</span>/cuda/lib64/</span><br></pre></td></tr></table></figure>\n<p>注意lib64里面其实只有两个文件，还有两个是软链接，复制后需要重新制作软链</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/cuda/lib64/</span><br><span class=\"line\">sudo rm -rf libcuDNN.so libcuDNN.so.6</span><br><span class=\"line\">sudo ln -s libcuDNN.so.6.0.21 libcuDNN.so.6</span><br><span class=\"line\">sudo ln -s libcuDNN.so.6 libcuDNN.so</span><br></pre></td></tr></table></figure>\n<h2 id=\"2安装tensorflow\"><a href=\"#2安装tensorflow\" class=\"headerlink\" title=\"2安装tensorflow\"></a>2安装tensorflow</h2><p>跟着官网去安装就好了，没有什么需要配置的内容了。</p>\n<h3 id=\"当然先建议将apt和pypi的安装源切换到国内源\"><a href=\"#当然先建议将apt和pypi的安装源切换到国内源\" class=\"headerlink\" title=\"当然先建议将apt和pypi的安装源切换到国内源\"></a>当然先建议将apt和pypi的安装源切换到国内源</h3><p>个人常用的是清华的源<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/pypi/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a></p>\n<p>当然推荐一下母校的源，虽然这个是在我毕业之后才有的。。。<a href=\"https://mirrors.shu.edu.cn/help/pypi.html\" target=\"_blank\" rel=\"noopener\">https://mirrors.shu.edu.cn/help/pypi.html</a></p>\n<h3 id=\"安装方式纠结\"><a href=\"#安装方式纠结\" class=\"headerlink\" title=\"安装方式纠结\"></a>安装方式纠结</h3><p>会有人去纠结用virtualenv还是pip安装，个人的想法是如果一直都要用的可以用pip。如果是抱着试一试的心态，或是有处女座洁癖的码农可以用virtualenv，它可以创建出一个独立的python第三方库的环境。正式的一个项目或是网上下载的项目，建议还是用virtualenv，独立的环境能避免一些没必要的版本问题。</p>"},{"title":"决策树简介","date":"2019-07-20T07:10:20.000Z","mathjax":true,"author":"alfred.cai","_content":"\n决策树最早是由Brieman等人一起提出的，“学名”可以被叫做连续递归切分的分类和回归树。顾名思义，就是用一种衡量标准去衡量每个变量在当前的数据集上的表现，并以此找到最佳表现的变量最为切分点，生成子树，并连续递归的切分下去，应用在分类或是回归问题当中，到后来还衍生出了随机深林，提升树，还有国人发现的XGBoost方法。\n<!-- more -->\n## 不纯度（impurity）\n\n不纯度是主衡量变量在数据集上表现的重要指标。常见的有信息增益、基尼系数（Gini index）作为特征选取的指标。\n\n- 信息增益：用熵（entropy）来衡量数据集、切分后的数据集中的所包含信息量。两者相减定义为信息增益，表示为特征对数据集的不纯度的减少的程度。信息增益越大说明特征具有更好的分类能力。\n  $$\n  \\begin{aligned}\n    g(D,A)    &=H(D)-H(D|A) \\\\\n    H(D)    &=-\\sum_{k=1}^K \\frac{C_k}{D} log_2(\\frac{C_k}{D}) \\\\\n    H(D|A)    &=\\sum_{i+1}^n \\frac{D_i}{D} H(D_i) \\\\\n  \\end{aligned}\n  $$\n\n  $g(D,A)$ 为数据集 $D$ 对特征A的信息增益；$H(D)$ 是数据集的熵；$H(D_i)$ 是数据集 $D_i$ 的熵；$H(D|A)$ 是数据集 $D$ 对特征 $A$ 的条件熵；$D_i$ 是 $D$ 中特征 $A$ 取第 $i$ 个值时的样本子集；$C_k$ 是 $D$ 中属于第 $k$ 类的样本集；$n$ 是特征 $A$ 取值的个数；$K$ 是类的个数。\n\n- 基尼系数（Gini index）：$Gini(D,A)$ 表示为数据集 $D$ 被特征 $A$ 切分后的不纯度。基尼系数越大说明当前数据集的不纯度越大。我们需要选择找到基尼系数最小的特征作为最优特征。\n  $$\n  \\begin{aligned}\n    Gini(D)    &=1-\\sum_{k=1}^{K} (\\frac{C_k}{D})^2 \\\\\n    Gini(D,A)    &=\\frac{D_1}{D} Gini(D_1)+\\frac{D_2}{D} Gini(D_2)\n  \\end{aligned}\n  $$\n  \n  $C_k$ 是 $D$ 中属于第 $k$ 类的样本集；$n$ 是特征 $A$ 取值的个数；$K$ 是类的个数\n\n## 剪枝（pruning）\n\n由于连续递归的切分下去，会生成一棵完全树，会存在过拟合的问题，会过分在意噪点数据。为了削弱影响，需要进行剪枝，使树变得简单一点，从而对未知数据有更准确的预测。\n\n- 基本想法是用一个损失函数去计算各个节点的误差，内部节点和他的子树的损失函数值减少的值最小的那个进行剪枝，然后用交叉验证选取最佳子树。\n","source":"_posts/decsion-tree.md","raw":"---\ntitle: 决策树简介\ndate: 2019-07-20 15:10:20\nmathjax: true\ntags:\n- tree-methods\n- machine-learning\nauthor: alfred.cai\n---\n\n决策树最早是由Brieman等人一起提出的，“学名”可以被叫做连续递归切分的分类和回归树。顾名思义，就是用一种衡量标准去衡量每个变量在当前的数据集上的表现，并以此找到最佳表现的变量最为切分点，生成子树，并连续递归的切分下去，应用在分类或是回归问题当中，到后来还衍生出了随机深林，提升树，还有国人发现的XGBoost方法。\n<!-- more -->\n## 不纯度（impurity）\n\n不纯度是主衡量变量在数据集上表现的重要指标。常见的有信息增益、基尼系数（Gini index）作为特征选取的指标。\n\n- 信息增益：用熵（entropy）来衡量数据集、切分后的数据集中的所包含信息量。两者相减定义为信息增益，表示为特征对数据集的不纯度的减少的程度。信息增益越大说明特征具有更好的分类能力。\n  $$\n  \\begin{aligned}\n    g(D,A)    &=H(D)-H(D|A) \\\\\n    H(D)    &=-\\sum_{k=1}^K \\frac{C_k}{D} log_2(\\frac{C_k}{D}) \\\\\n    H(D|A)    &=\\sum_{i+1}^n \\frac{D_i}{D} H(D_i) \\\\\n  \\end{aligned}\n  $$\n\n  $g(D,A)$ 为数据集 $D$ 对特征A的信息增益；$H(D)$ 是数据集的熵；$H(D_i)$ 是数据集 $D_i$ 的熵；$H(D|A)$ 是数据集 $D$ 对特征 $A$ 的条件熵；$D_i$ 是 $D$ 中特征 $A$ 取第 $i$ 个值时的样本子集；$C_k$ 是 $D$ 中属于第 $k$ 类的样本集；$n$ 是特征 $A$ 取值的个数；$K$ 是类的个数。\n\n- 基尼系数（Gini index）：$Gini(D,A)$ 表示为数据集 $D$ 被特征 $A$ 切分后的不纯度。基尼系数越大说明当前数据集的不纯度越大。我们需要选择找到基尼系数最小的特征作为最优特征。\n  $$\n  \\begin{aligned}\n    Gini(D)    &=1-\\sum_{k=1}^{K} (\\frac{C_k}{D})^2 \\\\\n    Gini(D,A)    &=\\frac{D_1}{D} Gini(D_1)+\\frac{D_2}{D} Gini(D_2)\n  \\end{aligned}\n  $$\n  \n  $C_k$ 是 $D$ 中属于第 $k$ 类的样本集；$n$ 是特征 $A$ 取值的个数；$K$ 是类的个数\n\n## 剪枝（pruning）\n\n由于连续递归的切分下去，会生成一棵完全树，会存在过拟合的问题，会过分在意噪点数据。为了削弱影响，需要进行剪枝，使树变得简单一点，从而对未知数据有更准确的预测。\n\n- 基本想法是用一个损失函数去计算各个节点的误差，内部节点和他的子树的损失函数值减少的值最小的那个进行剪枝，然后用交叉验证选取最佳子树。\n","slug":"decsion-tree","published":1,"updated":"2020-07-09T04:02:41.786Z","_id":"ckc5pryuw000589k0bjgn02r7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>决策树最早是由Brieman等人一起提出的，“学名”可以被叫做连续递归切分的分类和回归树。顾名思义，就是用一种衡量标准去衡量每个变量在当前的数据集上的表现，并以此找到最佳表现的变量最为切分点，生成子树，并连续递归的切分下去，应用在分类或是回归问题当中，到后来还衍生出了随机深林，提升树，还有国人发现的XGBoost方法。<br><a id=\"more\"></a></p>\n<h2 id=\"不纯度（impurity）\"><a href=\"#不纯度（impurity）\" class=\"headerlink\" title=\"不纯度（impurity）\"></a>不纯度（impurity）</h2><p>不纯度是主衡量变量在数据集上表现的重要指标。常见的有信息增益、基尼系数（Gini index）作为特征选取的指标。</p>\n<ul>\n<li><p>信息增益：用熵（entropy）来衡量数据集、切分后的数据集中的所包含信息量。两者相减定义为信息增益，表示为特征对数据集的不纯度的减少的程度。信息增益越大说明特征具有更好的分类能力。</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n  g(D,A)    &=H(D)-H(D|A) \\\\\n  H(D)    &=-\\sum_{k=1}^K \\frac{C_k}{D} log_2(\\frac{C_k}{D}) \\\\\n  H(D|A)    &=\\sum_{i+1}^n \\frac{D_i}{D} H(D_i) \\\\\n\\end{aligned}</script><p>$g(D,A)$ 为数据集 $D$ 对特征A的信息增益；$H(D)$ 是数据集的熵；$H(D_i)$ 是数据集 $D_i$ 的熵；$H(D|A)$ 是数据集 $D$ 对特征 $A$ 的条件熵；$D_i$ 是 $D$ 中特征 $A$ 取第 $i$ 个值时的样本子集；$C_k$ 是 $D$ 中属于第 $k$ 类的样本集；$n$ 是特征 $A$ 取值的个数；$K$ 是类的个数。</p>\n</li>\n<li><p>基尼系数（Gini index）：$Gini(D,A)$ 表示为数据集 $D$ 被特征 $A$ 切分后的不纯度。基尼系数越大说明当前数据集的不纯度越大。我们需要选择找到基尼系数最小的特征作为最优特征。</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n  Gini(D)    &=1-\\sum_{k=1}^{K} (\\frac{C_k}{D})^2 \\\\\n  Gini(D,A)    &=\\frac{D_1}{D} Gini(D_1)+\\frac{D_2}{D} Gini(D_2)\n\\end{aligned}</script><p>$C_k$ 是 $D$ 中属于第 $k$ 类的样本集；$n$ 是特征 $A$ 取值的个数；$K$ 是类的个数</p>\n</li>\n</ul>\n<h2 id=\"剪枝（pruning）\"><a href=\"#剪枝（pruning）\" class=\"headerlink\" title=\"剪枝（pruning）\"></a>剪枝（pruning）</h2><p>由于连续递归的切分下去，会生成一棵完全树，会存在过拟合的问题，会过分在意噪点数据。为了削弱影响，需要进行剪枝，使树变得简单一点，从而对未知数据有更准确的预测。</p>\n<ul>\n<li>基本想法是用一个损失函数去计算各个节点的误差，内部节点和他的子树的损失函数值减少的值最小的那个进行剪枝，然后用交叉验证选取最佳子树。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>决策树最早是由Brieman等人一起提出的，“学名”可以被叫做连续递归切分的分类和回归树。顾名思义，就是用一种衡量标准去衡量每个变量在当前的数据集上的表现，并以此找到最佳表现的变量最为切分点，生成子树，并连续递归的切分下去，应用在分类或是回归问题当中，到后来还衍生出了随机深林，提升树，还有国人发现的XGBoost方法。<br>","more":"</p>\n<h2 id=\"不纯度（impurity）\"><a href=\"#不纯度（impurity）\" class=\"headerlink\" title=\"不纯度（impurity）\"></a>不纯度（impurity）</h2><p>不纯度是主衡量变量在数据集上表现的重要指标。常见的有信息增益、基尼系数（Gini index）作为特征选取的指标。</p>\n<ul>\n<li><p>信息增益：用熵（entropy）来衡量数据集、切分后的数据集中的所包含信息量。两者相减定义为信息增益，表示为特征对数据集的不纯度的减少的程度。信息增益越大说明特征具有更好的分类能力。</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n  g(D,A)    &=H(D)-H(D|A) \\\\\n  H(D)    &=-\\sum_{k=1}^K \\frac{C_k}{D} log_2(\\frac{C_k}{D}) \\\\\n  H(D|A)    &=\\sum_{i+1}^n \\frac{D_i}{D} H(D_i) \\\\\n\\end{aligned}</script><p>$g(D,A)$ 为数据集 $D$ 对特征A的信息增益；$H(D)$ 是数据集的熵；$H(D_i)$ 是数据集 $D_i$ 的熵；$H(D|A)$ 是数据集 $D$ 对特征 $A$ 的条件熵；$D_i$ 是 $D$ 中特征 $A$ 取第 $i$ 个值时的样本子集；$C_k$ 是 $D$ 中属于第 $k$ 类的样本集；$n$ 是特征 $A$ 取值的个数；$K$ 是类的个数。</p>\n</li>\n<li><p>基尼系数（Gini index）：$Gini(D,A)$ 表示为数据集 $D$ 被特征 $A$ 切分后的不纯度。基尼系数越大说明当前数据集的不纯度越大。我们需要选择找到基尼系数最小的特征作为最优特征。</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n  Gini(D)    &=1-\\sum_{k=1}^{K} (\\frac{C_k}{D})^2 \\\\\n  Gini(D,A)    &=\\frac{D_1}{D} Gini(D_1)+\\frac{D_2}{D} Gini(D_2)\n\\end{aligned}</script><p>$C_k$ 是 $D$ 中属于第 $k$ 类的样本集；$n$ 是特征 $A$ 取值的个数；$K$ 是类的个数</p>\n</li>\n</ul>\n<h2 id=\"剪枝（pruning）\"><a href=\"#剪枝（pruning）\" class=\"headerlink\" title=\"剪枝（pruning）\"></a>剪枝（pruning）</h2><p>由于连续递归的切分下去，会生成一棵完全树，会存在过拟合的问题，会过分在意噪点数据。为了削弱影响，需要进行剪枝，使树变得简单一点，从而对未知数据有更准确的预测。</p>\n<ul>\n<li>基本想法是用一个损失函数去计算各个节点的误差，内部节点和他的子树的损失函数值减少的值最小的那个进行剪枝，然后用交叉验证选取最佳子树。</li>\n</ul>"},{"title":"buildpacks 下个时代的企业镜像打包工具","mathjax":false,"date":"2020-07-03T04:10:28.000Z","author":"alfred.cai","_content":"由于中文对buildpack的介绍不是很多，于是我就来献丑了。\n<!-- more -->\n## 发布代码的流程\n1. 最先我们的发布流程是登陆虚拟机进入部署，不同的环境不能很好的隔离，而且开发者在本地部署的环境和运维人员在虚拟机上的环境可能也会有细微的差别，又需要一段时间的沟通。\n2. 后来有了docker的发布，能在同一台机器上隔离多个运行环境。并且能保证开发和运行环境一致。运维终于可以把锅甩回给了开发自己。\n\n## 那么buildpack是开解决什么问题的呢？\n现在微服务流行后，一个网站后端可能有数十个微服务的应用在运行。应用基本上是在统一的框架下编写不同业务逻辑代码。此时，dockerfile这个文件就会显得比较的累赘。数十个服务的dockerfile几乎都是复制黏贴到项目中。dockerfile中大部分内容的负责人应该是框架编写者而不是写业务代码的CURD boys。并且后续由于框架的升级对镜像的更新也需要去改写数十个项目的dockerfile。实在太繁琐了。\n\nbuildpacks也就由此流行起来了。他抛弃了dockerfile里对环境的具体操作，而是改成了一种描述性的表达。而具体要的环境又交回给了运维。\n\n## 如何使用 buildpacks\n\n### 打包代码\n```bash\npack build my-app\n    --path ~/codes/my-app\n    --run-image cloudfoundry/run:base-cnb\n    --buildpack org.cloudfoundry.openjdk\n    --buildpack org.cloudfoundry.buildsystem\n    --buildpack org.cloudfoundry.jvmapplication\n    --buildpack org.cloudfoundry.tomcat\n    --buildpack org.cloudfoundry.springboot\n    --buildpack org.cloudfoundry.distzip\n    --buildpack org.cloudfoundry.springautoreconfiguration\n```\n- pack 命令行\n- my-app 打包的镜像名\n- path 代码目录\n- run-image 项目运行时的基础镜像\n- buildpack 一系列预先定义好的编译和运行程序\n\n\n为了简化代码，buildpacks又定义了一个builder的概念。builder里包含了一系列 buildpack，build-image（编译镜像）和 run-image（运行镜像）。\n```bash\npack build my-app --builder cloudfoundry/cnb:bionic\n```\n\n### 选择可用的builder\n```bash\npack suggest-builders\n```\n\n### 查看 builder 所包含的buildpack 和其顺序\n```bash\npack inspect-builder gcr.io/buildpacks/builder \n```\n\n## buildpacks 具体做了什么事情\nbuildpack一共有五个生命周期阶段\n- detect 发现项目语言，找到一系列的buildpack\n- analysis 分析文件，重用之前image layer\n- restore 设置缓存\n- build 执行buildpack文件打包文件创建image\n- export 导出到docker或者远端镜像\n \n五个步骤就是buildpack的打包的全过程了。\n\ndetect会去查找项目例如package.json, pom.xml, \n\nbuild.gradle来判断项目是用什么编程语言来选择buildpack文件到layers目录下。\n\nanalysis,resore 用于缓存image layer，metadata等信息加速打包过程。\n\nbuild 执行buildpack打包镜像。 \n\nexport 发布镜像。\n\n## buildpacks 历史\nbuildpacks 最早是Heroku公司在2011推出的。Heroku公司也是现在支持编程语言最多的。2018，Pivotal和Heroku公司共同定义了buildpacks协议，推出了Cloud Native Buildpacks(CNB)。至此已经有很多公司推出了buildpacks builder镜像了。例如[google](), [paketo](https://paketo.io/), [Cloud Foundry](https://docs.cloudfoundry.org/buildpacks/)\n```\nGoogle:                gcr.io/buildpacks/builder                    Ubuntu 18 base image with buildpacks for .NET, Go, Java, Node.js, and Python\nHeroku:                heroku/buildpacks:18                         heroku-18 base image with buildpacks for Ruby, Java, Node.js, Python, Golang, & PHP\nPaketo Buildpacks:     gcr.io/paketo-buildpacks/builder:base        Ubuntu bionic base image with buildpacks for Java, NodeJS and Golang\nPaketo Buildpacks:     gcr.io/paketo-buildpacks/builder:full-cf     cflinuxfs3 base image with buildpacks for Java, .NET, NodeJS, Golang, PHP, HTTPD and NGINX\nPaketo Buildpacks:     gcr.io/paketo-buildpacks/builder:tiny        Tiny base image (bionic build image, distroless run image) with buildpacks for Golang\n```\n\n## buildpacks协议规范\nhttps://github.com/buildpacks/spec/blob/main/buildpack.md","source":"_posts/buildpacks.md","raw":"---\ntitle: buildpacks 下个时代的企业镜像打包工具\nmathjax: false\ndate: 2020-07-03 12:10:28\ntags:\n- buildpacks\n- docker\n- CI/CD\nauthor: alfred.cai\n---\n由于中文对buildpack的介绍不是很多，于是我就来献丑了。\n<!-- more -->\n## 发布代码的流程\n1. 最先我们的发布流程是登陆虚拟机进入部署，不同的环境不能很好的隔离，而且开发者在本地部署的环境和运维人员在虚拟机上的环境可能也会有细微的差别，又需要一段时间的沟通。\n2. 后来有了docker的发布，能在同一台机器上隔离多个运行环境。并且能保证开发和运行环境一致。运维终于可以把锅甩回给了开发自己。\n\n## 那么buildpack是开解决什么问题的呢？\n现在微服务流行后，一个网站后端可能有数十个微服务的应用在运行。应用基本上是在统一的框架下编写不同业务逻辑代码。此时，dockerfile这个文件就会显得比较的累赘。数十个服务的dockerfile几乎都是复制黏贴到项目中。dockerfile中大部分内容的负责人应该是框架编写者而不是写业务代码的CURD boys。并且后续由于框架的升级对镜像的更新也需要去改写数十个项目的dockerfile。实在太繁琐了。\n\nbuildpacks也就由此流行起来了。他抛弃了dockerfile里对环境的具体操作，而是改成了一种描述性的表达。而具体要的环境又交回给了运维。\n\n## 如何使用 buildpacks\n\n### 打包代码\n```bash\npack build my-app\n    --path ~/codes/my-app\n    --run-image cloudfoundry/run:base-cnb\n    --buildpack org.cloudfoundry.openjdk\n    --buildpack org.cloudfoundry.buildsystem\n    --buildpack org.cloudfoundry.jvmapplication\n    --buildpack org.cloudfoundry.tomcat\n    --buildpack org.cloudfoundry.springboot\n    --buildpack org.cloudfoundry.distzip\n    --buildpack org.cloudfoundry.springautoreconfiguration\n```\n- pack 命令行\n- my-app 打包的镜像名\n- path 代码目录\n- run-image 项目运行时的基础镜像\n- buildpack 一系列预先定义好的编译和运行程序\n\n\n为了简化代码，buildpacks又定义了一个builder的概念。builder里包含了一系列 buildpack，build-image（编译镜像）和 run-image（运行镜像）。\n```bash\npack build my-app --builder cloudfoundry/cnb:bionic\n```\n\n### 选择可用的builder\n```bash\npack suggest-builders\n```\n\n### 查看 builder 所包含的buildpack 和其顺序\n```bash\npack inspect-builder gcr.io/buildpacks/builder \n```\n\n## buildpacks 具体做了什么事情\nbuildpack一共有五个生命周期阶段\n- detect 发现项目语言，找到一系列的buildpack\n- analysis 分析文件，重用之前image layer\n- restore 设置缓存\n- build 执行buildpack文件打包文件创建image\n- export 导出到docker或者远端镜像\n \n五个步骤就是buildpack的打包的全过程了。\n\ndetect会去查找项目例如package.json, pom.xml, \n\nbuild.gradle来判断项目是用什么编程语言来选择buildpack文件到layers目录下。\n\nanalysis,resore 用于缓存image layer，metadata等信息加速打包过程。\n\nbuild 执行buildpack打包镜像。 \n\nexport 发布镜像。\n\n## buildpacks 历史\nbuildpacks 最早是Heroku公司在2011推出的。Heroku公司也是现在支持编程语言最多的。2018，Pivotal和Heroku公司共同定义了buildpacks协议，推出了Cloud Native Buildpacks(CNB)。至此已经有很多公司推出了buildpacks builder镜像了。例如[google](), [paketo](https://paketo.io/), [Cloud Foundry](https://docs.cloudfoundry.org/buildpacks/)\n```\nGoogle:                gcr.io/buildpacks/builder                    Ubuntu 18 base image with buildpacks for .NET, Go, Java, Node.js, and Python\nHeroku:                heroku/buildpacks:18                         heroku-18 base image with buildpacks for Ruby, Java, Node.js, Python, Golang, & PHP\nPaketo Buildpacks:     gcr.io/paketo-buildpacks/builder:base        Ubuntu bionic base image with buildpacks for Java, NodeJS and Golang\nPaketo Buildpacks:     gcr.io/paketo-buildpacks/builder:full-cf     cflinuxfs3 base image with buildpacks for Java, .NET, NodeJS, Golang, PHP, HTTPD and NGINX\nPaketo Buildpacks:     gcr.io/paketo-buildpacks/builder:tiny        Tiny base image (bionic build image, distroless run image) with buildpacks for Golang\n```\n\n## buildpacks协议规范\nhttps://github.com/buildpacks/spec/blob/main/buildpack.md","slug":"buildpacks","published":1,"updated":"2020-07-09T04:02:38.293Z","_id":"ckc5pryuy000789k094xn491g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>由于中文对buildpack的介绍不是很多，于是我就来献丑了。<br><a id=\"more\"></a></p>\n<h2 id=\"发布代码的流程\"><a href=\"#发布代码的流程\" class=\"headerlink\" title=\"发布代码的流程\"></a>发布代码的流程</h2><ol>\n<li>最先我们的发布流程是登陆虚拟机进入部署，不同的环境不能很好的隔离，而且开发者在本地部署的环境和运维人员在虚拟机上的环境可能也会有细微的差别，又需要一段时间的沟通。</li>\n<li>后来有了docker的发布，能在同一台机器上隔离多个运行环境。并且能保证开发和运行环境一致。运维终于可以把锅甩回给了开发自己。</li>\n</ol>\n<h2 id=\"那么buildpack是开解决什么问题的呢？\"><a href=\"#那么buildpack是开解决什么问题的呢？\" class=\"headerlink\" title=\"那么buildpack是开解决什么问题的呢？\"></a>那么buildpack是开解决什么问题的呢？</h2><p>现在微服务流行后，一个网站后端可能有数十个微服务的应用在运行。应用基本上是在统一的框架下编写不同业务逻辑代码。此时，dockerfile这个文件就会显得比较的累赘。数十个服务的dockerfile几乎都是复制黏贴到项目中。dockerfile中大部分内容的负责人应该是框架编写者而不是写业务代码的CURD boys。并且后续由于框架的升级对镜像的更新也需要去改写数十个项目的dockerfile。实在太繁琐了。</p>\n<p>buildpacks也就由此流行起来了。他抛弃了dockerfile里对环境的具体操作，而是改成了一种描述性的表达。而具体要的环境又交回给了运维。</p>\n<h2 id=\"如何使用-buildpacks\"><a href=\"#如何使用-buildpacks\" class=\"headerlink\" title=\"如何使用 buildpacks\"></a>如何使用 buildpacks</h2><h3 id=\"打包代码\"><a href=\"#打包代码\" class=\"headerlink\" title=\"打包代码\"></a>打包代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pack build my-app</span><br><span class=\"line\">    --path ~/codes/my-app</span><br><span class=\"line\">    --run-image cloudfoundry/run:base-cnb</span><br><span class=\"line\">    --buildpack org.cloudfoundry.openjdk</span><br><span class=\"line\">    --buildpack org.cloudfoundry.buildsystem</span><br><span class=\"line\">    --buildpack org.cloudfoundry.jvmapplication</span><br><span class=\"line\">    --buildpack org.cloudfoundry.tomcat</span><br><span class=\"line\">    --buildpack org.cloudfoundry.springboot</span><br><span class=\"line\">    --buildpack org.cloudfoundry.distzip</span><br><span class=\"line\">    --buildpack org.cloudfoundry.springautoreconfiguration</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pack 命令行</li>\n<li>my-app 打包的镜像名</li>\n<li>path 代码目录</li>\n<li>run-image 项目运行时的基础镜像</li>\n<li>buildpack 一系列预先定义好的编译和运行程序</li>\n</ul>\n<p>为了简化代码，buildpacks又定义了一个builder的概念。builder里包含了一系列 buildpack，build-image（编译镜像）和 run-image（运行镜像）。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pack build my-app --builder cloudfoundry/cnb:bionic</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"选择可用的builder\"><a href=\"#选择可用的builder\" class=\"headerlink\" title=\"选择可用的builder\"></a>选择可用的builder</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pack suggest-builders</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看-builder-所包含的buildpack-和其顺序\"><a href=\"#查看-builder-所包含的buildpack-和其顺序\" class=\"headerlink\" title=\"查看 builder 所包含的buildpack 和其顺序\"></a>查看 builder 所包含的buildpack 和其顺序</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pack inspect-builder gcr.io/buildpacks/builder</span><br></pre></td></tr></table></figure>\n<h2 id=\"buildpacks-具体做了什么事情\"><a href=\"#buildpacks-具体做了什么事情\" class=\"headerlink\" title=\"buildpacks 具体做了什么事情\"></a>buildpacks 具体做了什么事情</h2><p>buildpack一共有五个生命周期阶段</p>\n<ul>\n<li>detect 发现项目语言，找到一系列的buildpack</li>\n<li>analysis 分析文件，重用之前image layer</li>\n<li>restore 设置缓存</li>\n<li>build 执行buildpack文件打包文件创建image</li>\n<li>export 导出到docker或者远端镜像</li>\n</ul>\n<p>五个步骤就是buildpack的打包的全过程了。</p>\n<p>detect会去查找项目例如package.json, pom.xml, </p>\n<p>build.gradle来判断项目是用什么编程语言来选择buildpack文件到layers目录下。</p>\n<p>analysis,resore 用于缓存image layer，metadata等信息加速打包过程。</p>\n<p>build 执行buildpack打包镜像。 </p>\n<p>export 发布镜像。</p>\n<h2 id=\"buildpacks-历史\"><a href=\"#buildpacks-历史\" class=\"headerlink\" title=\"buildpacks 历史\"></a>buildpacks 历史</h2><p>buildpacks 最早是Heroku公司在2011推出的。Heroku公司也是现在支持编程语言最多的。2018，Pivotal和Heroku公司共同定义了buildpacks协议，推出了Cloud Native Buildpacks(CNB)。至此已经有很多公司推出了buildpacks builder镜像了。例如<a href=\"\">google</a>, <a href=\"https://paketo.io/\">paketo</a>, <a href=\"https://docs.cloudfoundry.org/buildpacks/\" target=\"_blank\" rel=\"noopener\">Cloud Foundry</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Google:                gcr.io&#x2F;buildpacks&#x2F;builder                    Ubuntu 18 base image with buildpacks for .NET, Go, Java, Node.js, and Python</span><br><span class=\"line\">Heroku:                heroku&#x2F;buildpacks:18                         heroku-18 base image with buildpacks for Ruby, Java, Node.js, Python, Golang, &amp; PHP</span><br><span class=\"line\">Paketo Buildpacks:     gcr.io&#x2F;paketo-buildpacks&#x2F;builder:base        Ubuntu bionic base image with buildpacks for Java, NodeJS and Golang</span><br><span class=\"line\">Paketo Buildpacks:     gcr.io&#x2F;paketo-buildpacks&#x2F;builder:full-cf     cflinuxfs3 base image with buildpacks for Java, .NET, NodeJS, Golang, PHP, HTTPD and NGINX</span><br><span class=\"line\">Paketo Buildpacks:     gcr.io&#x2F;paketo-buildpacks&#x2F;builder:tiny        Tiny base image (bionic build image, distroless run image) with buildpacks for Golang</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"buildpacks协议规范\"><a href=\"#buildpacks协议规范\" class=\"headerlink\" title=\"buildpacks协议规范\"></a>buildpacks协议规范</h2><p><a href=\"https://github.com/buildpacks/spec/blob/main/buildpack.md\" target=\"_blank\" rel=\"noopener\">https://github.com/buildpacks/spec/blob/main/buildpack.md</a></p>\n","site":{"data":{}},"excerpt":"<p>由于中文对buildpack的介绍不是很多，于是我就来献丑了。<br>","more":"</p>\n<h2 id=\"发布代码的流程\"><a href=\"#发布代码的流程\" class=\"headerlink\" title=\"发布代码的流程\"></a>发布代码的流程</h2><ol>\n<li>最先我们的发布流程是登陆虚拟机进入部署，不同的环境不能很好的隔离，而且开发者在本地部署的环境和运维人员在虚拟机上的环境可能也会有细微的差别，又需要一段时间的沟通。</li>\n<li>后来有了docker的发布，能在同一台机器上隔离多个运行环境。并且能保证开发和运行环境一致。运维终于可以把锅甩回给了开发自己。</li>\n</ol>\n<h2 id=\"那么buildpack是开解决什么问题的呢？\"><a href=\"#那么buildpack是开解决什么问题的呢？\" class=\"headerlink\" title=\"那么buildpack是开解决什么问题的呢？\"></a>那么buildpack是开解决什么问题的呢？</h2><p>现在微服务流行后，一个网站后端可能有数十个微服务的应用在运行。应用基本上是在统一的框架下编写不同业务逻辑代码。此时，dockerfile这个文件就会显得比较的累赘。数十个服务的dockerfile几乎都是复制黏贴到项目中。dockerfile中大部分内容的负责人应该是框架编写者而不是写业务代码的CURD boys。并且后续由于框架的升级对镜像的更新也需要去改写数十个项目的dockerfile。实在太繁琐了。</p>\n<p>buildpacks也就由此流行起来了。他抛弃了dockerfile里对环境的具体操作，而是改成了一种描述性的表达。而具体要的环境又交回给了运维。</p>\n<h2 id=\"如何使用-buildpacks\"><a href=\"#如何使用-buildpacks\" class=\"headerlink\" title=\"如何使用 buildpacks\"></a>如何使用 buildpacks</h2><h3 id=\"打包代码\"><a href=\"#打包代码\" class=\"headerlink\" title=\"打包代码\"></a>打包代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pack build my-app</span><br><span class=\"line\">    --path ~/codes/my-app</span><br><span class=\"line\">    --run-image cloudfoundry/run:base-cnb</span><br><span class=\"line\">    --buildpack org.cloudfoundry.openjdk</span><br><span class=\"line\">    --buildpack org.cloudfoundry.buildsystem</span><br><span class=\"line\">    --buildpack org.cloudfoundry.jvmapplication</span><br><span class=\"line\">    --buildpack org.cloudfoundry.tomcat</span><br><span class=\"line\">    --buildpack org.cloudfoundry.springboot</span><br><span class=\"line\">    --buildpack org.cloudfoundry.distzip</span><br><span class=\"line\">    --buildpack org.cloudfoundry.springautoreconfiguration</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pack 命令行</li>\n<li>my-app 打包的镜像名</li>\n<li>path 代码目录</li>\n<li>run-image 项目运行时的基础镜像</li>\n<li>buildpack 一系列预先定义好的编译和运行程序</li>\n</ul>\n<p>为了简化代码，buildpacks又定义了一个builder的概念。builder里包含了一系列 buildpack，build-image（编译镜像）和 run-image（运行镜像）。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pack build my-app --builder cloudfoundry/cnb:bionic</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"选择可用的builder\"><a href=\"#选择可用的builder\" class=\"headerlink\" title=\"选择可用的builder\"></a>选择可用的builder</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pack suggest-builders</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看-builder-所包含的buildpack-和其顺序\"><a href=\"#查看-builder-所包含的buildpack-和其顺序\" class=\"headerlink\" title=\"查看 builder 所包含的buildpack 和其顺序\"></a>查看 builder 所包含的buildpack 和其顺序</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pack inspect-builder gcr.io/buildpacks/builder</span><br></pre></td></tr></table></figure>\n<h2 id=\"buildpacks-具体做了什么事情\"><a href=\"#buildpacks-具体做了什么事情\" class=\"headerlink\" title=\"buildpacks 具体做了什么事情\"></a>buildpacks 具体做了什么事情</h2><p>buildpack一共有五个生命周期阶段</p>\n<ul>\n<li>detect 发现项目语言，找到一系列的buildpack</li>\n<li>analysis 分析文件，重用之前image layer</li>\n<li>restore 设置缓存</li>\n<li>build 执行buildpack文件打包文件创建image</li>\n<li>export 导出到docker或者远端镜像</li>\n</ul>\n<p>五个步骤就是buildpack的打包的全过程了。</p>\n<p>detect会去查找项目例如package.json, pom.xml, </p>\n<p>build.gradle来判断项目是用什么编程语言来选择buildpack文件到layers目录下。</p>\n<p>analysis,resore 用于缓存image layer，metadata等信息加速打包过程。</p>\n<p>build 执行buildpack打包镜像。 </p>\n<p>export 发布镜像。</p>\n<h2 id=\"buildpacks-历史\"><a href=\"#buildpacks-历史\" class=\"headerlink\" title=\"buildpacks 历史\"></a>buildpacks 历史</h2><p>buildpacks 最早是Heroku公司在2011推出的。Heroku公司也是现在支持编程语言最多的。2018，Pivotal和Heroku公司共同定义了buildpacks协议，推出了Cloud Native Buildpacks(CNB)。至此已经有很多公司推出了buildpacks builder镜像了。例如<a href=\"\">google</a>, <a href=\"https://paketo.io/\">paketo</a>, <a href=\"https://docs.cloudfoundry.org/buildpacks/\" target=\"_blank\" rel=\"noopener\">Cloud Foundry</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Google:                gcr.io&#x2F;buildpacks&#x2F;builder                    Ubuntu 18 base image with buildpacks for .NET, Go, Java, Node.js, and Python</span><br><span class=\"line\">Heroku:                heroku&#x2F;buildpacks:18                         heroku-18 base image with buildpacks for Ruby, Java, Node.js, Python, Golang, &amp; PHP</span><br><span class=\"line\">Paketo Buildpacks:     gcr.io&#x2F;paketo-buildpacks&#x2F;builder:base        Ubuntu bionic base image with buildpacks for Java, NodeJS and Golang</span><br><span class=\"line\">Paketo Buildpacks:     gcr.io&#x2F;paketo-buildpacks&#x2F;builder:full-cf     cflinuxfs3 base image with buildpacks for Java, .NET, NodeJS, Golang, PHP, HTTPD and NGINX</span><br><span class=\"line\">Paketo Buildpacks:     gcr.io&#x2F;paketo-buildpacks&#x2F;builder:tiny        Tiny base image (bionic build image, distroless run image) with buildpacks for Golang</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"buildpacks协议规范\"><a href=\"#buildpacks协议规范\" class=\"headerlink\" title=\"buildpacks协议规范\"></a>buildpacks协议规范</h2><p><a href=\"https://github.com/buildpacks/spec/blob/main/buildpack.md\" target=\"_blank\" rel=\"noopener\">https://github.com/buildpacks/spec/blob/main/buildpack.md</a></p>"},{"title":"在Windows环境下编译XGboost的R语言包GPU支持","mathjax":false,"date":"2019-08-03T03:39:43.000Z","author":"alfred.cai","_content":"由于XGboost的R包并没有对GPU的支持，而我又一定要用R语言，刚好官网上提供了自己编译能让R包支持CUDA。自己在学习实践XGboost时，想用他和随机森林的方法进行比较，需要构建大量的树，用上GPU希望能加快训练速度。但是编译的过程十分的痛苦，记录一下也许可以对别人有所帮助。  \n<!-- more -->\n## 环境介绍\n\n*   Windows 10 1903\n*   R 3.6.1\n*   Rtools 35\n*   Visual Studio 2019\n*   CMake\n*   cuda 10.1，这次编译使得xgboost能用上cuda 10.1版本\n\n## 步骤\n1.  下载代码到本地，包括它所用到的三个其他项目（rabit、dmlc-core、cub）\n\n```bash\n    git clone --recursive https://github.com/dmlc/xgboost  \n    cd xgboost  \n```\n\n2.  用Visual Studio 2019打开项目，在他的CMake setting里的CMake command arguments里写入 `\\-DUSE\\_CUDA=ON -DR\\_LIB=ON`\n    *   如果你遇到了[LIBR\\_LIB\\_DIR was not set](#LIBR-LIB-DIR) 或是[INTERFACE\\_INCLUDE\\_DIRECTORIES property contains path](#INTERFACE-INCLUDE-DIRECTORIES) 问题，你需要多加一些参数，最后的命令会是：`\\-DUSE\\_CUDA=ON -DR\\_LIB=ON -DLIBR\\_EXECUTABLE=\"C:/Program Files/R/R-3.6.1/bin/x64/R.exe\" -DCMAKE\\_INSTALL\\_PREFIX=\"C:/Program Files (x86)/xgboost\"`  \n    *   Visual Studio 里的Build Root与官方文档不一致，我就选择了它默认的`${projectDir}\\out\\build\\${name}`\n        \n    *   如果你用命令行下的cmake的话，cuda 10.1 版本的机器会提示没有找到nvcc，所以我自己尝试下来只能在Visual Studio图形化界面下操作\n\n3.  选择`Build > Build ALL`进行编译，等待编译完成后再点击`Build > install xgboost`它会自动帮你安装R包，结束后就可以打开RStudio进行测试了。\n    \n    *   或者你也可以在开始菜单里找到Visual Studio下的命令行，执行`cmake --build . --target install --config Release`进行编译，编译完成后它会自动安装R包。结束后可以打开RStudio进行测试。两者做的同一件事，只是操作不一样，看个人喜好吧。\n\n4.  python版的安装，需要回到主目录下的`python-package`进行安装，安装完后可以用自带的测试程序进行测试是否安装成功\n\n```bash\ncd python-package  \npython setup.py install  \npython ..\\\\tests\\\\benchmark\\\\benchmark\\_tree.py --tree\\_method \"gpu\\_hist\" --iterations 10  \npython ..\\\\tests\\\\benchmark\\\\benchmark\\_tree.py --tree\\_method \"hist\" --iterations 10  \n```\n\n## 可能遇到的问题\n\n由于我的CMake是用Visual Studio下载的，是内嵌在里面的，用起来不是很方便但是还可以用用。如果想用cmake的命令行，可以在开始菜单里找到Visual Studio 2019的文件夹下X64 Native Tools Cammand Prompt for VS 2019.\n\n### LIBR_LIB_DIR\n\n> CMake Error at cmake/modules/FindLibR.cmake:44 (message): LIBR\\_LIB\\_DIR was not set!\n\n这是因为R语言没有添加到系统环境里，可以在执行cmake的时候指定R语言的目录`-DLIBR_EXECUTABLE=\"C:/Program Files/R/R-3.6.1/bin/x64/R.exe\"`\n\n### INTERFACE_INCLUDE_DIRECTORIES\n\n> CMake Error in C:\\\\Users\\\\alfre\\\\Documents\\\\CodeProjects\\\\GithubProjects\\\\xgboost\\\\CMakeLists.txt:  \n> Target “xgboost” INTERFACE\\_INCLUDE\\_DIRECTORIES property contains path:  \n> “C:/Users/alfred/Documents/CodeProjects/GithubProjects/xgboost/out/install/x64-Debug/include”  \n> which is prefixed in the source directory.\n\n这个报错是在Visual Studio生成配置文件时出现的，对比了用命令行生成的文件，发现是z指定到了`\"C:/Program Files (x86)/xgboost\"`，如果遇到的朋友可以在参数里再加一条`-DCMAKE_INSTALL_PREFIX=\"C:/Program Files (x86)/xgboost\"`， 编译结束之后cmake也没生成`C:/Program Files (x86)/xgboost`文件夹。\n\n### gendef file or dlltool file\n\n这问题是由于没有没有安装Rtools导致的，奇怪的是，安装程序它会把`C:\\Rtools\\bin`添加到系统环境里，但是xgboost用到的两个程序其实是在Rtools所提供的mingw里，也就是说你要自己将`C:\\Rtools\\mingw_64\\bin`添加到系统环境里的PATH变量里。我一开始以为我安装时取消勾选里这个选项，但是没有添加到环境变量里，但是后来又重装了一遍才发现其实是Rtools自己的问题。\n\n### cuda版本问题\n\ncuda版本问题永远在你身边！每次拿到新电脑，都是先装cuda再去安装TensorFlow，numpy等等软件包的，你会发现大家的cuda版本都是nvidia出的慢半个版本，导致你会在自己编译还是重装cuda中纠结。而且各家活跃度不一样使得对cuda支持的版本都不一样，所以在问题会不停的出现纠结花好久才解决。  \n这次也是，如果根据官网的文档，在命令行下运行cmake（`cmake .. -G\"Visual Studio 16 2019\" -DUSE_CUDA=ON -DR_LIB=ON -DLIBR_EXECUTABLE=\"C:/Program Files/R/R-3.6.1/bin/x64/R.exe\"`）会出现报错，发现官方支持到cuda10.0。但是！如果用Visual Studio打开项目，用Visual Studio去生成缓存文件，发现并不会报错，能让xgboost支持cuda10.1。最近新买电脑的朋友的可以注意下了，装cuda10.1也没问题。","source":"_posts/build-xgboost-in-R-with-gpu-support.md","raw":"---\ntitle: 在Windows环境下编译XGboost的R语言包GPU支持\nmathjax: false\ndate: 2019-08-03 11:39:43\ntags:\n- machine-learning \n- xgboost \n- cuda \n- R-package\nauthor: alfred.cai\n---\n由于XGboost的R包并没有对GPU的支持，而我又一定要用R语言，刚好官网上提供了自己编译能让R包支持CUDA。自己在学习实践XGboost时，想用他和随机森林的方法进行比较，需要构建大量的树，用上GPU希望能加快训练速度。但是编译的过程十分的痛苦，记录一下也许可以对别人有所帮助。  \n<!-- more -->\n## 环境介绍\n\n*   Windows 10 1903\n*   R 3.6.1\n*   Rtools 35\n*   Visual Studio 2019\n*   CMake\n*   cuda 10.1，这次编译使得xgboost能用上cuda 10.1版本\n\n## 步骤\n1.  下载代码到本地，包括它所用到的三个其他项目（rabit、dmlc-core、cub）\n\n```bash\n    git clone --recursive https://github.com/dmlc/xgboost  \n    cd xgboost  \n```\n\n2.  用Visual Studio 2019打开项目，在他的CMake setting里的CMake command arguments里写入 `\\-DUSE\\_CUDA=ON -DR\\_LIB=ON`\n    *   如果你遇到了[LIBR\\_LIB\\_DIR was not set](#LIBR-LIB-DIR) 或是[INTERFACE\\_INCLUDE\\_DIRECTORIES property contains path](#INTERFACE-INCLUDE-DIRECTORIES) 问题，你需要多加一些参数，最后的命令会是：`\\-DUSE\\_CUDA=ON -DR\\_LIB=ON -DLIBR\\_EXECUTABLE=\"C:/Program Files/R/R-3.6.1/bin/x64/R.exe\" -DCMAKE\\_INSTALL\\_PREFIX=\"C:/Program Files (x86)/xgboost\"`  \n    *   Visual Studio 里的Build Root与官方文档不一致，我就选择了它默认的`${projectDir}\\out\\build\\${name}`\n        \n    *   如果你用命令行下的cmake的话，cuda 10.1 版本的机器会提示没有找到nvcc，所以我自己尝试下来只能在Visual Studio图形化界面下操作\n\n3.  选择`Build > Build ALL`进行编译，等待编译完成后再点击`Build > install xgboost`它会自动帮你安装R包，结束后就可以打开RStudio进行测试了。\n    \n    *   或者你也可以在开始菜单里找到Visual Studio下的命令行，执行`cmake --build . --target install --config Release`进行编译，编译完成后它会自动安装R包。结束后可以打开RStudio进行测试。两者做的同一件事，只是操作不一样，看个人喜好吧。\n\n4.  python版的安装，需要回到主目录下的`python-package`进行安装，安装完后可以用自带的测试程序进行测试是否安装成功\n\n```bash\ncd python-package  \npython setup.py install  \npython ..\\\\tests\\\\benchmark\\\\benchmark\\_tree.py --tree\\_method \"gpu\\_hist\" --iterations 10  \npython ..\\\\tests\\\\benchmark\\\\benchmark\\_tree.py --tree\\_method \"hist\" --iterations 10  \n```\n\n## 可能遇到的问题\n\n由于我的CMake是用Visual Studio下载的，是内嵌在里面的，用起来不是很方便但是还可以用用。如果想用cmake的命令行，可以在开始菜单里找到Visual Studio 2019的文件夹下X64 Native Tools Cammand Prompt for VS 2019.\n\n### LIBR_LIB_DIR\n\n> CMake Error at cmake/modules/FindLibR.cmake:44 (message): LIBR\\_LIB\\_DIR was not set!\n\n这是因为R语言没有添加到系统环境里，可以在执行cmake的时候指定R语言的目录`-DLIBR_EXECUTABLE=\"C:/Program Files/R/R-3.6.1/bin/x64/R.exe\"`\n\n### INTERFACE_INCLUDE_DIRECTORIES\n\n> CMake Error in C:\\\\Users\\\\alfre\\\\Documents\\\\CodeProjects\\\\GithubProjects\\\\xgboost\\\\CMakeLists.txt:  \n> Target “xgboost” INTERFACE\\_INCLUDE\\_DIRECTORIES property contains path:  \n> “C:/Users/alfred/Documents/CodeProjects/GithubProjects/xgboost/out/install/x64-Debug/include”  \n> which is prefixed in the source directory.\n\n这个报错是在Visual Studio生成配置文件时出现的，对比了用命令行生成的文件，发现是z指定到了`\"C:/Program Files (x86)/xgboost\"`，如果遇到的朋友可以在参数里再加一条`-DCMAKE_INSTALL_PREFIX=\"C:/Program Files (x86)/xgboost\"`， 编译结束之后cmake也没生成`C:/Program Files (x86)/xgboost`文件夹。\n\n### gendef file or dlltool file\n\n这问题是由于没有没有安装Rtools导致的，奇怪的是，安装程序它会把`C:\\Rtools\\bin`添加到系统环境里，但是xgboost用到的两个程序其实是在Rtools所提供的mingw里，也就是说你要自己将`C:\\Rtools\\mingw_64\\bin`添加到系统环境里的PATH变量里。我一开始以为我安装时取消勾选里这个选项，但是没有添加到环境变量里，但是后来又重装了一遍才发现其实是Rtools自己的问题。\n\n### cuda版本问题\n\ncuda版本问题永远在你身边！每次拿到新电脑，都是先装cuda再去安装TensorFlow，numpy等等软件包的，你会发现大家的cuda版本都是nvidia出的慢半个版本，导致你会在自己编译还是重装cuda中纠结。而且各家活跃度不一样使得对cuda支持的版本都不一样，所以在问题会不停的出现纠结花好久才解决。  \n这次也是，如果根据官网的文档，在命令行下运行cmake（`cmake .. -G\"Visual Studio 16 2019\" -DUSE_CUDA=ON -DR_LIB=ON -DLIBR_EXECUTABLE=\"C:/Program Files/R/R-3.6.1/bin/x64/R.exe\"`）会出现报错，发现官方支持到cuda10.0。但是！如果用Visual Studio打开项目，用Visual Studio去生成缓存文件，发现并不会报错，能让xgboost支持cuda10.1。最近新买电脑的朋友的可以注意下了，装cuda10.1也没问题。","slug":"build-xgboost-in-R-with-gpu-support","published":1,"updated":"2020-07-09T04:02:33.711Z","_id":"ckce91rgq0000j1k04b901k1t","comments":1,"layout":"post","photos":[],"link":"","content":"<p>由于XGboost的R包并没有对GPU的支持，而我又一定要用R语言，刚好官网上提供了自己编译能让R包支持CUDA。自己在学习实践XGboost时，想用他和随机森林的方法进行比较，需要构建大量的树，用上GPU希望能加快训练速度。但是编译的过程十分的痛苦，记录一下也许可以对别人有所帮助。<br><a id=\"more\"></a></p>\n<h2 id=\"环境介绍\"><a href=\"#环境介绍\" class=\"headerlink\" title=\"环境介绍\"></a>环境介绍</h2><ul>\n<li>Windows 10 1903</li>\n<li>R 3.6.1</li>\n<li>Rtools 35</li>\n<li>Visual Studio 2019</li>\n<li>CMake</li>\n<li>cuda 10.1，这次编译使得xgboost能用上cuda 10.1版本</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>下载代码到本地，包括它所用到的三个其他项目（rabit、dmlc-core、cub）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --recursive https://github.com/dmlc/xgboost  </span><br><span class=\"line\"><span class=\"built_in\">cd</span> xgboost</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>用Visual Studio 2019打开项目，在他的CMake setting里的CMake command arguments里写入 <code>\\-DUSE\\_CUDA=ON -DR\\_LIB=ON</code></p>\n<ul>\n<li>如果你遇到了<a href=\"#LIBR-LIB-DIR\">LIBR_LIB_DIR was not set</a> 或是<a href=\"#INTERFACE-INCLUDE-DIRECTORIES\">INTERFACE_INCLUDE_DIRECTORIES property contains path</a> 问题，你需要多加一些参数，最后的命令会是：<code>\\-DUSE\\_CUDA=ON -DR\\_LIB=ON -DLIBR\\_EXECUTABLE=&quot;C:/Program Files/R/R-3.6.1/bin/x64/R.exe&quot; -DCMAKE\\_INSTALL\\_PREFIX=&quot;C:/Program Files (x86)/xgboost&quot;</code>  </li>\n<li><p>Visual Studio 里的Build Root与官方文档不一致，我就选择了它默认的<code>${projectDir}\\out\\build\\${name}</code></p>\n</li>\n<li><p>如果你用命令行下的cmake的话，cuda 10.1 版本的机器会提示没有找到nvcc，所以我自己尝试下来只能在Visual Studio图形化界面下操作</p>\n</li>\n</ul>\n</li>\n<li><p>选择<code>Build &gt; Build ALL</code>进行编译，等待编译完成后再点击<code>Build &gt; install xgboost</code>它会自动帮你安装R包，结束后就可以打开RStudio进行测试了。</p>\n<ul>\n<li>或者你也可以在开始菜单里找到Visual Studio下的命令行，执行<code>cmake --build . --target install --config Release</code>进行编译，编译完成后它会自动安装R包。结束后可以打开RStudio进行测试。两者做的同一件事，只是操作不一样，看个人喜好吧。</li>\n</ul>\n</li>\n<li><p>python版的安装，需要回到主目录下的<code>python-package</code>进行安装，安装完后可以用自带的测试程序进行测试是否安装成功</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> python-package  </span><br><span class=\"line\">python setup.py install  </span><br><span class=\"line\">python ..\\\\tests\\\\benchmark\\\\benchmark\\_tree.py --tree\\_method <span class=\"string\">\"gpu\\_hist\"</span> --iterations 10  </span><br><span class=\"line\">python ..\\\\tests\\\\benchmark\\\\benchmark\\_tree.py --tree\\_method <span class=\"string\">\"hist\"</span> --iterations 10</span><br></pre></td></tr></table></figure>\n<h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><p>由于我的CMake是用Visual Studio下载的，是内嵌在里面的，用起来不是很方便但是还可以用用。如果想用cmake的命令行，可以在开始菜单里找到Visual Studio 2019的文件夹下X64 Native Tools Cammand Prompt for VS 2019.</p>\n<h3 id=\"LIBR-LIB-DIR\"><a href=\"#LIBR-LIB-DIR\" class=\"headerlink\" title=\"LIBR_LIB_DIR\"></a>LIBR_LIB_DIR</h3><blockquote>\n<p>CMake Error at cmake/modules/FindLibR.cmake:44 (message): LIBR_LIB_DIR was not set!</p>\n</blockquote>\n<p>这是因为R语言没有添加到系统环境里，可以在执行cmake的时候指定R语言的目录<code>-DLIBR_EXECUTABLE=&quot;C:/Program Files/R/R-3.6.1/bin/x64/R.exe&quot;</code></p>\n<h3 id=\"INTERFACE-INCLUDE-DIRECTORIES\"><a href=\"#INTERFACE-INCLUDE-DIRECTORIES\" class=\"headerlink\" title=\"INTERFACE_INCLUDE_DIRECTORIES\"></a>INTERFACE_INCLUDE_DIRECTORIES</h3><blockquote>\n<p>CMake Error in C:\\Users\\alfre\\Documents\\CodeProjects\\GithubProjects\\xgboost\\CMakeLists.txt:<br>Target “xgboost” INTERFACE_INCLUDE_DIRECTORIES property contains path:<br>“C:/Users/alfred/Documents/CodeProjects/GithubProjects/xgboost/out/install/x64-Debug/include”<br>which is prefixed in the source directory.</p>\n</blockquote>\n<p>这个报错是在Visual Studio生成配置文件时出现的，对比了用命令行生成的文件，发现是z指定到了<code>&quot;C:/Program Files (x86)/xgboost&quot;</code>，如果遇到的朋友可以在参数里再加一条<code>-DCMAKE_INSTALL_PREFIX=&quot;C:/Program Files (x86)/xgboost&quot;</code>， 编译结束之后cmake也没生成<code>C:/Program Files (x86)/xgboost</code>文件夹。</p>\n<h3 id=\"gendef-file-or-dlltool-file\"><a href=\"#gendef-file-or-dlltool-file\" class=\"headerlink\" title=\"gendef file or dlltool file\"></a>gendef file or dlltool file</h3><p>这问题是由于没有没有安装Rtools导致的，奇怪的是，安装程序它会把<code>C:\\Rtools\\bin</code>添加到系统环境里，但是xgboost用到的两个程序其实是在Rtools所提供的mingw里，也就是说你要自己将<code>C:\\Rtools\\mingw_64\\bin</code>添加到系统环境里的PATH变量里。我一开始以为我安装时取消勾选里这个选项，但是没有添加到环境变量里，但是后来又重装了一遍才发现其实是Rtools自己的问题。</p>\n<h3 id=\"cuda版本问题\"><a href=\"#cuda版本问题\" class=\"headerlink\" title=\"cuda版本问题\"></a>cuda版本问题</h3><p>cuda版本问题永远在你身边！每次拿到新电脑，都是先装cuda再去安装TensorFlow，numpy等等软件包的，你会发现大家的cuda版本都是nvidia出的慢半个版本，导致你会在自己编译还是重装cuda中纠结。而且各家活跃度不一样使得对cuda支持的版本都不一样，所以在问题会不停的出现纠结花好久才解决。<br>这次也是，如果根据官网的文档，在命令行下运行cmake（<code>cmake .. -G&quot;Visual Studio 16 2019&quot; -DUSE_CUDA=ON -DR_LIB=ON -DLIBR_EXECUTABLE=&quot;C:/Program Files/R/R-3.6.1/bin/x64/R.exe&quot;</code>）会出现报错，发现官方支持到cuda10.0。但是！如果用Visual Studio打开项目，用Visual Studio去生成缓存文件，发现并不会报错，能让xgboost支持cuda10.1。最近新买电脑的朋友的可以注意下了，装cuda10.1也没问题。</p>\n","site":{"data":{}},"excerpt":"<p>由于XGboost的R包并没有对GPU的支持，而我又一定要用R语言，刚好官网上提供了自己编译能让R包支持CUDA。自己在学习实践XGboost时，想用他和随机森林的方法进行比较，需要构建大量的树，用上GPU希望能加快训练速度。但是编译的过程十分的痛苦，记录一下也许可以对别人有所帮助。<br>","more":"</p>\n<h2 id=\"环境介绍\"><a href=\"#环境介绍\" class=\"headerlink\" title=\"环境介绍\"></a>环境介绍</h2><ul>\n<li>Windows 10 1903</li>\n<li>R 3.6.1</li>\n<li>Rtools 35</li>\n<li>Visual Studio 2019</li>\n<li>CMake</li>\n<li>cuda 10.1，这次编译使得xgboost能用上cuda 10.1版本</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>下载代码到本地，包括它所用到的三个其他项目（rabit、dmlc-core、cub）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --recursive https://github.com/dmlc/xgboost  </span><br><span class=\"line\"><span class=\"built_in\">cd</span> xgboost</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>用Visual Studio 2019打开项目，在他的CMake setting里的CMake command arguments里写入 <code>\\-DUSE\\_CUDA=ON -DR\\_LIB=ON</code></p>\n<ul>\n<li>如果你遇到了<a href=\"#LIBR-LIB-DIR\">LIBR_LIB_DIR was not set</a> 或是<a href=\"#INTERFACE-INCLUDE-DIRECTORIES\">INTERFACE_INCLUDE_DIRECTORIES property contains path</a> 问题，你需要多加一些参数，最后的命令会是：<code>\\-DUSE\\_CUDA=ON -DR\\_LIB=ON -DLIBR\\_EXECUTABLE=&quot;C:/Program Files/R/R-3.6.1/bin/x64/R.exe&quot; -DCMAKE\\_INSTALL\\_PREFIX=&quot;C:/Program Files (x86)/xgboost&quot;</code>  </li>\n<li><p>Visual Studio 里的Build Root与官方文档不一致，我就选择了它默认的<code>${projectDir}\\out\\build\\${name}</code></p>\n</li>\n<li><p>如果你用命令行下的cmake的话，cuda 10.1 版本的机器会提示没有找到nvcc，所以我自己尝试下来只能在Visual Studio图形化界面下操作</p>\n</li>\n</ul>\n</li>\n<li><p>选择<code>Build &gt; Build ALL</code>进行编译，等待编译完成后再点击<code>Build &gt; install xgboost</code>它会自动帮你安装R包，结束后就可以打开RStudio进行测试了。</p>\n<ul>\n<li>或者你也可以在开始菜单里找到Visual Studio下的命令行，执行<code>cmake --build . --target install --config Release</code>进行编译，编译完成后它会自动安装R包。结束后可以打开RStudio进行测试。两者做的同一件事，只是操作不一样，看个人喜好吧。</li>\n</ul>\n</li>\n<li><p>python版的安装，需要回到主目录下的<code>python-package</code>进行安装，安装完后可以用自带的测试程序进行测试是否安装成功</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> python-package  </span><br><span class=\"line\">python setup.py install  </span><br><span class=\"line\">python ..\\\\tests\\\\benchmark\\\\benchmark\\_tree.py --tree\\_method <span class=\"string\">\"gpu\\_hist\"</span> --iterations 10  </span><br><span class=\"line\">python ..\\\\tests\\\\benchmark\\\\benchmark\\_tree.py --tree\\_method <span class=\"string\">\"hist\"</span> --iterations 10</span><br></pre></td></tr></table></figure>\n<h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><p>由于我的CMake是用Visual Studio下载的，是内嵌在里面的，用起来不是很方便但是还可以用用。如果想用cmake的命令行，可以在开始菜单里找到Visual Studio 2019的文件夹下X64 Native Tools Cammand Prompt for VS 2019.</p>\n<h3 id=\"LIBR-LIB-DIR\"><a href=\"#LIBR-LIB-DIR\" class=\"headerlink\" title=\"LIBR_LIB_DIR\"></a>LIBR_LIB_DIR</h3><blockquote>\n<p>CMake Error at cmake/modules/FindLibR.cmake:44 (message): LIBR_LIB_DIR was not set!</p>\n</blockquote>\n<p>这是因为R语言没有添加到系统环境里，可以在执行cmake的时候指定R语言的目录<code>-DLIBR_EXECUTABLE=&quot;C:/Program Files/R/R-3.6.1/bin/x64/R.exe&quot;</code></p>\n<h3 id=\"INTERFACE-INCLUDE-DIRECTORIES\"><a href=\"#INTERFACE-INCLUDE-DIRECTORIES\" class=\"headerlink\" title=\"INTERFACE_INCLUDE_DIRECTORIES\"></a>INTERFACE_INCLUDE_DIRECTORIES</h3><blockquote>\n<p>CMake Error in C:\\Users\\alfre\\Documents\\CodeProjects\\GithubProjects\\xgboost\\CMakeLists.txt:<br>Target “xgboost” INTERFACE_INCLUDE_DIRECTORIES property contains path:<br>“C:/Users/alfred/Documents/CodeProjects/GithubProjects/xgboost/out/install/x64-Debug/include”<br>which is prefixed in the source directory.</p>\n</blockquote>\n<p>这个报错是在Visual Studio生成配置文件时出现的，对比了用命令行生成的文件，发现是z指定到了<code>&quot;C:/Program Files (x86)/xgboost&quot;</code>，如果遇到的朋友可以在参数里再加一条<code>-DCMAKE_INSTALL_PREFIX=&quot;C:/Program Files (x86)/xgboost&quot;</code>， 编译结束之后cmake也没生成<code>C:/Program Files (x86)/xgboost</code>文件夹。</p>\n<h3 id=\"gendef-file-or-dlltool-file\"><a href=\"#gendef-file-or-dlltool-file\" class=\"headerlink\" title=\"gendef file or dlltool file\"></a>gendef file or dlltool file</h3><p>这问题是由于没有没有安装Rtools导致的，奇怪的是，安装程序它会把<code>C:\\Rtools\\bin</code>添加到系统环境里，但是xgboost用到的两个程序其实是在Rtools所提供的mingw里，也就是说你要自己将<code>C:\\Rtools\\mingw_64\\bin</code>添加到系统环境里的PATH变量里。我一开始以为我安装时取消勾选里这个选项，但是没有添加到环境变量里，但是后来又重装了一遍才发现其实是Rtools自己的问题。</p>\n<h3 id=\"cuda版本问题\"><a href=\"#cuda版本问题\" class=\"headerlink\" title=\"cuda版本问题\"></a>cuda版本问题</h3><p>cuda版本问题永远在你身边！每次拿到新电脑，都是先装cuda再去安装TensorFlow，numpy等等软件包的，你会发现大家的cuda版本都是nvidia出的慢半个版本，导致你会在自己编译还是重装cuda中纠结。而且各家活跃度不一样使得对cuda支持的版本都不一样，所以在问题会不停的出现纠结花好久才解决。<br>这次也是，如果根据官网的文档，在命令行下运行cmake（<code>cmake .. -G&quot;Visual Studio 16 2019&quot; -DUSE_CUDA=ON -DR_LIB=ON -DLIBR_EXECUTABLE=&quot;C:/Program Files/R/R-3.6.1/bin/x64/R.exe&quot;</code>）会出现报错，发现官方支持到cuda10.0。但是！如果用Visual Studio打开项目，用Visual Studio去生成缓存文件，发现并不会报错，能让xgboost支持cuda10.1。最近新买电脑的朋友的可以注意下了，装cuda10.1也没问题。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckc5pryuk000089k02gycetnq","tag_id":"ckc5pryuu000489k0f9gp11sd","_id":"ckc5pryv0000a89k08c2lfhtl"},{"post_id":"ckc5pryuk000089k02gycetnq","tag_id":"ckc5pryuz000889k0489j6nli","_id":"ckc5pryv0000b89k0dc8g5k8m"},{"post_id":"ckc5pryus000289k0damiasr9","tag_id":"ckc5pryv0000989k01yfcftmn","_id":"ckc5pryv1000f89k00bfk8q0w"},{"post_id":"ckc5pryus000289k0damiasr9","tag_id":"ckc5pryv0000c89k05kxqel6s","_id":"ckc5pryv1000g89k0h7w795ol"},{"post_id":"ckc5pryus000289k0damiasr9","tag_id":"ckc5pryv0000d89k04mxf3qea","_id":"ckc5pryv1000i89k01agd9o4r"},{"post_id":"ckc5pryuw000589k0bjgn02r7","tag_id":"ckc5pryv1000e89k039qh4nxp","_id":"ckc5pryv2000k89k03j312dpc"},{"post_id":"ckc5pryuw000589k0bjgn02r7","tag_id":"ckc5pryv1000h89k02kuo1kg1","_id":"ckc5pryv2000l89k0bu8gd8t0"},{"post_id":"ckc5pryuy000789k094xn491g","tag_id":"ckc5pryv1000j89k0emmcabvm","_id":"ckc5pryv4000o89k00ulb9636"},{"post_id":"ckc5pryuy000789k094xn491g","tag_id":"ckc5pryv2000m89k0gmqzdgis","_id":"ckc5pryv4000p89k08i3o6sak"},{"post_id":"ckc5pryuy000789k094xn491g","tag_id":"ckc5pryv4000n89k05aeh14rm","_id":"ckc5pryv4000q89k07yh90mw3"},{"post_id":"ckce91rgq0000j1k04b901k1t","tag_id":"ckc5pryv1000h89k02kuo1kg1","_id":"ckce9a4qo0002krk0hmdhdp80"},{"post_id":"ckce91rgq0000j1k04b901k1t","tag_id":"ckce9a4qm0000krk01cau4rvb","_id":"ckce9a4qo0003krk066zw99cm"},{"post_id":"ckce91rgq0000j1k04b901k1t","tag_id":"ckc5pryv0000c89k05kxqel6s","_id":"ckce9a4qo0004krk02oine2q1"},{"post_id":"ckce91rgq0000j1k04b901k1t","tag_id":"ckce9a4qn0001krk06m400eda","_id":"ckce9a4qo0005krk0de6e0fyp"}],"Tag":[{"name":"git","_id":"ckc5pryuu000489k0f9gp11sd"},{"name":"vps","_id":"ckc5pryuz000889k0489j6nli"},{"name":"ubuntu","_id":"ckc5pryv0000989k01yfcftmn"},{"name":"cuda","_id":"ckc5pryv0000c89k05kxqel6s"},{"name":"cudnn","_id":"ckc5pryv0000d89k04mxf3qea"},{"name":"tree-methods","_id":"ckc5pryv1000e89k039qh4nxp"},{"name":"machine-learning","_id":"ckc5pryv1000h89k02kuo1kg1"},{"name":"buildpacks","_id":"ckc5pryv1000j89k0emmcabvm"},{"name":"docker","_id":"ckc5pryv2000m89k0gmqzdgis"},{"name":"CI/CD","_id":"ckc5pryv4000n89k05aeh14rm"},{"name":"xgboost","_id":"ckce9a4qm0000krk01cau4rvb"},{"name":"R-package","_id":"ckce9a4qn0001krk06m400eda"}]}}